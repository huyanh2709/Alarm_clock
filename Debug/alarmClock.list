
alarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004920  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004adc  08004adc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004adc  08004adc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004adc  08004adc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  08004b40  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08004b40  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010501  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c4  00000000  00000000  000305c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00032a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccd  00000000  00000000  00033ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188b1  00000000  00000000  0003479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013351  00000000  00000000  0004d04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d2ad  00000000  00000000  0006039f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004998  00000000  00000000  000ed64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f1fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a14 	.word	0x08004a14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004a14 	.word	0x08004a14

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <alarmClock_NORMAL_display>:
static Button_Handle_Typedef light_button;
static alarmTime alarm;
static stopWatch stop_watch;

static void alarmClock_NORMAL_display()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af02      	add	r7, sp, #8
	lcd_set_cursor(&hlcd, 0, 4);
 8000162:	2204      	movs	r2, #4
 8000164:	2100      	movs	r1, #0
 8000166:	4816      	ldr	r0, [pc, #88]	; (80001c0 <alarmClock_NORMAL_display+0x64>)
 8000168:	f000 ff78 	bl	800105c <lcd_set_cursor>
	lcd_printf(&hlcd,"%02d:%02d:%02d",hrtc.td->hour,hrtc.td->minute,hrtc.td->second);
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <alarmClock_NORMAL_display+0x68>)
 800016e:	685b      	ldr	r3, [r3, #4]
 8000170:	789b      	ldrb	r3, [r3, #2]
 8000172:	461a      	mov	r2, r3
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <alarmClock_NORMAL_display+0x68>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	785b      	ldrb	r3, [r3, #1]
 800017a:	4619      	mov	r1, r3
 800017c:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <alarmClock_NORMAL_display+0x68>)
 800017e:	685b      	ldr	r3, [r3, #4]
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	460b      	mov	r3, r1
 8000186:	4910      	ldr	r1, [pc, #64]	; (80001c8 <alarmClock_NORMAL_display+0x6c>)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <alarmClock_NORMAL_display+0x64>)
 800018a:	f000 ffa1 	bl	80010d0 <lcd_printf>
	lcd_set_cursor(&hlcd, 1, 4);
 800018e:	2204      	movs	r2, #4
 8000190:	2101      	movs	r1, #1
 8000192:	480b      	ldr	r0, [pc, #44]	; (80001c0 <alarmClock_NORMAL_display+0x64>)
 8000194:	f000 ff62 	bl	800105c <lcd_set_cursor>
	lcd_printf(&hlcd,"%02d/%02d/%02d",hrtc.td->date,hrtc.td->month,hrtc.td->year);
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <alarmClock_NORMAL_display+0x68>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	791b      	ldrb	r3, [r3, #4]
 800019e:	461a      	mov	r2, r3
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <alarmClock_NORMAL_display+0x68>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	795b      	ldrb	r3, [r3, #5]
 80001a6:	4619      	mov	r1, r3
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <alarmClock_NORMAL_display+0x68>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	799b      	ldrb	r3, [r3, #6]
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	460b      	mov	r3, r1
 80001b2:	4906      	ldr	r1, [pc, #24]	; (80001cc <alarmClock_NORMAL_display+0x70>)
 80001b4:	4802      	ldr	r0, [pc, #8]	; (80001c0 <alarmClock_NORMAL_display+0x64>)
 80001b6:	f000 ff8b 	bl	80010d0 <lcd_printf>
}
 80001ba:	bf00      	nop
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000088 	.word	0x20000088
 80001c4:	20000078 	.word	0x20000078
 80001c8:	08004a2c 	.word	0x08004a2c
 80001cc:	08004a3c 	.word	0x08004a3c

080001d0 <alarmClock_ALARM_display>:

static void alarmClock_ALARM_display()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
	lcd_set_cursor(&hlcd, 0, 4);
 80001d6:	2204      	movs	r2, #4
 80001d8:	2100      	movs	r1, #0
 80001da:	4810      	ldr	r0, [pc, #64]	; (800021c <alarmClock_ALARM_display+0x4c>)
 80001dc:	f000 ff3e 	bl	800105c <lcd_set_cursor>
	lcd_printf(&hlcd,"SET ALARM");
 80001e0:	490f      	ldr	r1, [pc, #60]	; (8000220 <alarmClock_ALARM_display+0x50>)
 80001e2:	480e      	ldr	r0, [pc, #56]	; (800021c <alarmClock_ALARM_display+0x4c>)
 80001e4:	f000 ff74 	bl	80010d0 <lcd_printf>
	lcd_set_cursor(&hlcd, 1, 4);
 80001e8:	2204      	movs	r2, #4
 80001ea:	2101      	movs	r1, #1
 80001ec:	480b      	ldr	r0, [pc, #44]	; (800021c <alarmClock_ALARM_display+0x4c>)
 80001ee:	f000 ff35 	bl	800105c <lcd_set_cursor>
	lcd_printf(&hlcd,"%02d:%02d:%02d",hrtc.alarm->hour,hrtc.alarm->minute,hrtc.alarm->second);
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <alarmClock_ALARM_display+0x54>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	789b      	ldrb	r3, [r3, #2]
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <alarmClock_ALARM_display+0x54>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	785b      	ldrb	r3, [r3, #1]
 8000200:	4619      	mov	r1, r3
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <alarmClock_ALARM_display+0x54>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	460b      	mov	r3, r1
 800020c:	4906      	ldr	r1, [pc, #24]	; (8000228 <alarmClock_ALARM_display+0x58>)
 800020e:	4803      	ldr	r0, [pc, #12]	; (800021c <alarmClock_ALARM_display+0x4c>)
 8000210:	f000 ff5e 	bl	80010d0 <lcd_printf>
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000088 	.word	0x20000088
 8000220:	08004a4c 	.word	0x08004a4c
 8000224:	20000078 	.word	0x20000078
 8000228:	08004a2c 	.word	0x08004a2c

0800022c <alarmClock_number_blink>:
	lcd_printf(&hlcd,"%02d/%02d/%02d",hrtc.td->date,hrtc.td->month,hrtc.td->year);
	i++;
}

static void alarmClock_number_blink(uint8_t row, uint8_t col)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	if(HAL_GetTick()%600 == 0)
 800023c:	f001 fb1a 	bl	8001874 <HAL_GetTick>
 8000240:	4602      	mov	r2, r0
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <alarmClock_number_blink+0x80>)
 8000244:	fba3 1302 	umull	r1, r3, r3, r2
 8000248:	099b      	lsrs	r3, r3, #6
 800024a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800024e:	fb01 f303 	mul.w	r3, r1, r3
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	2b00      	cmp	r3, #0
 8000256:	d109      	bne.n	800026c <alarmClock_number_blink+0x40>
	{
		lcd_set_cursor(&hlcd,row,col);
 8000258:	79ba      	ldrb	r2, [r7, #6]
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	4619      	mov	r1, r3
 800025e:	4814      	ldr	r0, [pc, #80]	; (80002b0 <alarmClock_number_blink+0x84>)
 8000260:	f000 fefc 	bl	800105c <lcd_set_cursor>
		lcd_printf(&hlcd, "  ");
 8000264:	4913      	ldr	r1, [pc, #76]	; (80002b4 <alarmClock_number_blink+0x88>)
 8000266:	4812      	ldr	r0, [pc, #72]	; (80002b0 <alarmClock_number_blink+0x84>)
 8000268:	f000 ff32 	bl	80010d0 <lcd_printf>
	}
	if(HAL_GetTick()%600 == 300)
 800026c:	f001 fb02 	bl	8001874 <HAL_GetTick>
 8000270:	4602      	mov	r2, r0
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <alarmClock_number_blink+0x80>)
 8000274:	fba3 1302 	umull	r1, r3, r3, r2
 8000278:	099b      	lsrs	r3, r3, #6
 800027a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800027e:	fb01 f303 	mul.w	r3, r1, r3
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000288:	d10b      	bne.n	80002a2 <alarmClock_number_blink+0x76>
	{
		if(ac_state == SET_TIME)
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <alarmClock_number_blink+0x8c>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d101      	bne.n	8000296 <alarmClock_number_blink+0x6a>
			alarmClock_NORMAL_display();
 8000292:	f7ff ff63 	bl	800015c <alarmClock_NORMAL_display>
		if(ac_state == SET_ALARM)
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <alarmClock_number_blink+0x8c>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d101      	bne.n	80002a2 <alarmClock_number_blink+0x76>
			alarmClock_ALARM_display();
 800029e:	f7ff ff97 	bl	80001d0 <alarmClock_ALARM_display>

	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	1b4e81b5 	.word	0x1b4e81b5
 80002b0:	20000088 	.word	0x20000088
 80002b4:	08004a58 	.word	0x08004a58
 80002b8:	20000094 	.word	0x20000094

080002bc <alarmClock_SET_TIME_display>:

static void alarmClock_SET_TIME_display()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	switch (setTime_state)
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <alarmClock_SET_TIME_display+0x70>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b05      	cmp	r3, #5
 80002c6:	d82d      	bhi.n	8000324 <alarmClock_SET_TIME_display+0x68>
 80002c8:	a201      	add	r2, pc, #4	; (adr r2, 80002d0 <alarmClock_SET_TIME_display+0x14>)
 80002ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ce:	bf00      	nop
 80002d0:	080002e9 	.word	0x080002e9
 80002d4:	080002f3 	.word	0x080002f3
 80002d8:	080002fd 	.word	0x080002fd
 80002dc:	08000307 	.word	0x08000307
 80002e0:	08000311 	.word	0x08000311
 80002e4:	0800031b 	.word	0x0800031b
	{
		case hour:
			alarmClock_number_blink(0,4);
 80002e8:	2104      	movs	r1, #4
 80002ea:	2000      	movs	r0, #0
 80002ec:	f7ff ff9e 	bl	800022c <alarmClock_number_blink>
			break;
 80002f0:	e019      	b.n	8000326 <alarmClock_SET_TIME_display+0x6a>
		case min:
			alarmClock_number_blink(0,7);
 80002f2:	2107      	movs	r1, #7
 80002f4:	2000      	movs	r0, #0
 80002f6:	f7ff ff99 	bl	800022c <alarmClock_number_blink>
			break;
 80002fa:	e014      	b.n	8000326 <alarmClock_SET_TIME_display+0x6a>
		case sec:
			alarmClock_number_blink(0,10);
 80002fc:	210a      	movs	r1, #10
 80002fe:	2000      	movs	r0, #0
 8000300:	f7ff ff94 	bl	800022c <alarmClock_number_blink>
			break;
 8000304:	e00f      	b.n	8000326 <alarmClock_SET_TIME_display+0x6a>
		case date:
			alarmClock_number_blink(1,4);
 8000306:	2104      	movs	r1, #4
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff8f 	bl	800022c <alarmClock_number_blink>
			break;
 800030e:	e00a      	b.n	8000326 <alarmClock_SET_TIME_display+0x6a>
		case month:
			alarmClock_number_blink(1,7);
 8000310:	2107      	movs	r1, #7
 8000312:	2001      	movs	r0, #1
 8000314:	f7ff ff8a 	bl	800022c <alarmClock_number_blink>
			break;
 8000318:	e005      	b.n	8000326 <alarmClock_SET_TIME_display+0x6a>
		case year:
			alarmClock_number_blink(1,10);
 800031a:	210a      	movs	r1, #10
 800031c:	2001      	movs	r0, #1
 800031e:	f7ff ff85 	bl	800022c <alarmClock_number_blink>
			break;
 8000322:	e000      	b.n	8000326 <alarmClock_SET_TIME_display+0x6a>
		default: break;
 8000324:	bf00      	nop
	}
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000095 	.word	0x20000095

08000330 <alarmClock_SET_ALARM_display>:

static void alarmClock_SET_ALARM_display()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	switch (setTime_state)
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <alarmClock_SET_ALARM_display+0x40>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d010      	beq.n	800035e <alarmClock_SET_ALARM_display+0x2e>
 800033c:	2b02      	cmp	r3, #2
 800033e:	dc13      	bgt.n	8000368 <alarmClock_SET_ALARM_display+0x38>
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <alarmClock_SET_ALARM_display+0x1a>
 8000344:	2b01      	cmp	r3, #1
 8000346:	d005      	beq.n	8000354 <alarmClock_SET_ALARM_display+0x24>
			alarmClock_number_blink(1,7);
			break;
		case sec:
			alarmClock_number_blink(1,10);
			break;
		default: break;
 8000348:	e00e      	b.n	8000368 <alarmClock_SET_ALARM_display+0x38>
			alarmClock_number_blink(1,4);
 800034a:	2104      	movs	r1, #4
 800034c:	2001      	movs	r0, #1
 800034e:	f7ff ff6d 	bl	800022c <alarmClock_number_blink>
			break;
 8000352:	e00a      	b.n	800036a <alarmClock_SET_ALARM_display+0x3a>
			alarmClock_number_blink(1,7);
 8000354:	2107      	movs	r1, #7
 8000356:	2001      	movs	r0, #1
 8000358:	f7ff ff68 	bl	800022c <alarmClock_number_blink>
			break;
 800035c:	e005      	b.n	800036a <alarmClock_SET_ALARM_display+0x3a>
			alarmClock_number_blink(1,10);
 800035e:	210a      	movs	r1, #10
 8000360:	2001      	movs	r0, #1
 8000362:	f7ff ff63 	bl	800022c <alarmClock_number_blink>
			break;
 8000366:	e000      	b.n	800036a <alarmClock_SET_ALARM_display+0x3a>
		default: break;
 8000368:	bf00      	nop
	}
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000095 	.word	0x20000095

08000374 <alarmClock_STOP_WATCH_display>:

static void alarmClock_STOP_WATCH_display()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af02      	add	r7, sp, #8
	lcd_set_cursor(&hlcd,0,4);
 800037a:	2204      	movs	r2, #4
 800037c:	2100      	movs	r1, #0
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <alarmClock_STOP_WATCH_display+0x50>)
 8000380:	f000 fe6c 	bl	800105c <lcd_set_cursor>
	lcd_printf(&hlcd,"STOP WATCH");
 8000384:	4910      	ldr	r1, [pc, #64]	; (80003c8 <alarmClock_STOP_WATCH_display+0x54>)
 8000386:	480f      	ldr	r0, [pc, #60]	; (80003c4 <alarmClock_STOP_WATCH_display+0x50>)
 8000388:	f000 fea2 	bl	80010d0 <lcd_printf>
	lcd_set_cursor(&hlcd,1,2);
 800038c:	2202      	movs	r2, #2
 800038e:	2101      	movs	r1, #1
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <alarmClock_STOP_WATCH_display+0x50>)
 8000392:	f000 fe63 	bl	800105c <lcd_set_cursor>
	lcd_printf(&hlcd,"%02d:%02d:%02d.%03d",stop_watch.hour,stop_watch.min,stop_watch.sec,stop_watch.ms);
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <alarmClock_STOP_WATCH_display+0x58>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <alarmClock_STOP_WATCH_display+0x58>)
 800039e:	785b      	ldrb	r3, [r3, #1]
 80003a0:	4618      	mov	r0, r3
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <alarmClock_STOP_WATCH_display+0x58>)
 80003a4:	789b      	ldrb	r3, [r3, #2]
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <alarmClock_STOP_WATCH_display+0x58>)
 80003aa:	889b      	ldrh	r3, [r3, #4]
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	4603      	mov	r3, r0
 80003b2:	460a      	mov	r2, r1
 80003b4:	4906      	ldr	r1, [pc, #24]	; (80003d0 <alarmClock_STOP_WATCH_display+0x5c>)
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <alarmClock_STOP_WATCH_display+0x50>)
 80003b8:	f000 fe8a 	bl	80010d0 <lcd_printf>
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000088 	.word	0x20000088
 80003c8:	08004a5c 	.word	0x08004a5c
 80003cc:	200000f4 	.word	0x200000f4
 80003d0:	08004a68 	.word	0x08004a68

080003d4 <setTime_button_handle>:

static void setTime_button_handle()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch (setTime_state)
 80003d8:	4b47      	ldr	r3, [pc, #284]	; (80004f8 <setTime_button_handle+0x124>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b05      	cmp	r3, #5
 80003de:	f200 8087 	bhi.w	80004f0 <setTime_button_handle+0x11c>
 80003e2:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <setTime_button_handle+0x14>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	08000401 	.word	0x08000401
 80003ec:	08000429 	.word	0x08000429
 80003f0:	08000451 	.word	0x08000451
 80003f4:	08000479 	.word	0x08000479
 80003f8:	080004a1 	.word	0x080004a1
 80003fc:	080004c9 	.word	0x080004c9
	{
		case hour:
			if(hrtc.td->hour < 23)
 8000400:	4b3e      	ldr	r3, [pc, #248]	; (80004fc <setTime_button_handle+0x128>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	2b16      	cmp	r3, #22
 8000408:	d806      	bhi.n	8000418 <setTime_button_handle+0x44>
				hrtc.td->hour++;
 800040a:	4b3c      	ldr	r3, [pc, #240]	; (80004fc <setTime_button_handle+0x128>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	789a      	ldrb	r2, [r3, #2]
 8000410:	3201      	adds	r2, #1
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	709a      	strb	r2, [r3, #2]
 8000416:	e003      	b.n	8000420 <setTime_button_handle+0x4c>
			else
				hrtc.td->hour = 0;
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <setTime_button_handle+0x128>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	2200      	movs	r2, #0
 800041e:	709a      	strb	r2, [r3, #2]
			RTC_writeTime(&hrtc);
 8000420:	4836      	ldr	r0, [pc, #216]	; (80004fc <setTime_button_handle+0x128>)
 8000422:	f000 fc91 	bl	8000d48 <RTC_writeTime>
			break;
 8000426:	e064      	b.n	80004f2 <setTime_button_handle+0x11e>
		case min:
			if(hrtc.td->minute < 59)
 8000428:	4b34      	ldr	r3, [pc, #208]	; (80004fc <setTime_button_handle+0x128>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	785b      	ldrb	r3, [r3, #1]
 800042e:	2b3a      	cmp	r3, #58	; 0x3a
 8000430:	d806      	bhi.n	8000440 <setTime_button_handle+0x6c>
				hrtc.td->minute++;
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <setTime_button_handle+0x128>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	785a      	ldrb	r2, [r3, #1]
 8000438:	3201      	adds	r2, #1
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	705a      	strb	r2, [r3, #1]
 800043e:	e003      	b.n	8000448 <setTime_button_handle+0x74>
			else
				hrtc.td->minute = 0;
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <setTime_button_handle+0x128>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	705a      	strb	r2, [r3, #1]
			RTC_writeTime(&hrtc);
 8000448:	482c      	ldr	r0, [pc, #176]	; (80004fc <setTime_button_handle+0x128>)
 800044a:	f000 fc7d 	bl	8000d48 <RTC_writeTime>
			break;
 800044e:	e050      	b.n	80004f2 <setTime_button_handle+0x11e>
		case sec:
			if(hrtc.td->second < 59)
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <setTime_button_handle+0x128>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b3a      	cmp	r3, #58	; 0x3a
 8000458:	d806      	bhi.n	8000468 <setTime_button_handle+0x94>
				hrtc.td->second++;
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <setTime_button_handle+0x128>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	3201      	adds	r2, #1
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	e003      	b.n	8000470 <setTime_button_handle+0x9c>
			else
				hrtc.td->second = 0;
 8000468:	4b24      	ldr	r3, [pc, #144]	; (80004fc <setTime_button_handle+0x128>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
			RTC_writeTime(&hrtc);
 8000470:	4822      	ldr	r0, [pc, #136]	; (80004fc <setTime_button_handle+0x128>)
 8000472:	f000 fc69 	bl	8000d48 <RTC_writeTime>
			break;
 8000476:	e03c      	b.n	80004f2 <setTime_button_handle+0x11e>
		case date:
			if(hrtc.td->date < 31)
 8000478:	4b20      	ldr	r3, [pc, #128]	; (80004fc <setTime_button_handle+0x128>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	2b1e      	cmp	r3, #30
 8000480:	d806      	bhi.n	8000490 <setTime_button_handle+0xbc>
				hrtc.td->date++;
 8000482:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <setTime_button_handle+0x128>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	791a      	ldrb	r2, [r3, #4]
 8000488:	3201      	adds	r2, #1
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	711a      	strb	r2, [r3, #4]
 800048e:	e003      	b.n	8000498 <setTime_button_handle+0xc4>
			else
				hrtc.td->date = 1;
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <setTime_button_handle+0x128>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2201      	movs	r2, #1
 8000496:	711a      	strb	r2, [r3, #4]
			RTC_writeTime(&hrtc);
 8000498:	4818      	ldr	r0, [pc, #96]	; (80004fc <setTime_button_handle+0x128>)
 800049a:	f000 fc55 	bl	8000d48 <RTC_writeTime>
			break;
 800049e:	e028      	b.n	80004f2 <setTime_button_handle+0x11e>
		case month:
			if(hrtc.td->month < 12)
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <setTime_button_handle+0x128>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	2b0b      	cmp	r3, #11
 80004a8:	d806      	bhi.n	80004b8 <setTime_button_handle+0xe4>
				hrtc.td->month++;
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <setTime_button_handle+0x128>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	795a      	ldrb	r2, [r3, #5]
 80004b0:	3201      	adds	r2, #1
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	715a      	strb	r2, [r3, #5]
 80004b6:	e003      	b.n	80004c0 <setTime_button_handle+0xec>
			else
				hrtc.td->month = 1;
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <setTime_button_handle+0x128>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2201      	movs	r2, #1
 80004be:	715a      	strb	r2, [r3, #5]
			RTC_writeTime(&hrtc);
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <setTime_button_handle+0x128>)
 80004c2:	f000 fc41 	bl	8000d48 <RTC_writeTime>
			break;
 80004c6:	e014      	b.n	80004f2 <setTime_button_handle+0x11e>
		case year:
			if(hrtc.td->year < 99)
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <setTime_button_handle+0x128>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	799b      	ldrb	r3, [r3, #6]
 80004ce:	2b62      	cmp	r3, #98	; 0x62
 80004d0:	d806      	bhi.n	80004e0 <setTime_button_handle+0x10c>
				hrtc.td->year++;
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <setTime_button_handle+0x128>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	799a      	ldrb	r2, [r3, #6]
 80004d8:	3201      	adds	r2, #1
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	719a      	strb	r2, [r3, #6]
 80004de:	e003      	b.n	80004e8 <setTime_button_handle+0x114>
			else
				hrtc.td->year = 0;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <setTime_button_handle+0x128>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	719a      	strb	r2, [r3, #6]
			RTC_writeTime(&hrtc);
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <setTime_button_handle+0x128>)
 80004ea:	f000 fc2d 	bl	8000d48 <RTC_writeTime>
			break;
 80004ee:	e000      	b.n	80004f2 <setTime_button_handle+0x11e>
		default: break;
 80004f0:	bf00      	nop
	}
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000095 	.word	0x20000095
 80004fc:	20000078 	.word	0x20000078

08000500 <setAlarm_button_handle>:

static void setAlarm_button_handle()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	switch (setTime_state)
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <setAlarm_button_handle+0x8c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d028      	beq.n	800055e <setAlarm_button_handle+0x5e>
 800050c:	2b02      	cmp	r3, #2
 800050e:	dc37      	bgt.n	8000580 <setAlarm_button_handle+0x80>
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <setAlarm_button_handle+0x1a>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d011      	beq.n	800053c <setAlarm_button_handle+0x3c>
			if(hrtc.alarm->second < 59)
				hrtc.alarm->second++;
			else
				hrtc.alarm->second = 0;
			break;
		default: break;
 8000518:	e032      	b.n	8000580 <setAlarm_button_handle+0x80>
			if(hrtc.alarm->hour < 23)
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <setAlarm_button_handle+0x90>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	2b16      	cmp	r3, #22
 8000522:	d806      	bhi.n	8000532 <setAlarm_button_handle+0x32>
				hrtc.alarm->hour++;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <setAlarm_button_handle+0x90>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	789a      	ldrb	r2, [r3, #2]
 800052a:	3201      	adds	r2, #1
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	709a      	strb	r2, [r3, #2]
			break;
 8000530:	e027      	b.n	8000582 <setAlarm_button_handle+0x82>
				hrtc.alarm->hour = 0;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <setAlarm_button_handle+0x90>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	2200      	movs	r2, #0
 8000538:	709a      	strb	r2, [r3, #2]
			break;
 800053a:	e022      	b.n	8000582 <setAlarm_button_handle+0x82>
			if(hrtc.alarm->minute < 59)
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <setAlarm_button_handle+0x90>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	785b      	ldrb	r3, [r3, #1]
 8000542:	2b3a      	cmp	r3, #58	; 0x3a
 8000544:	d806      	bhi.n	8000554 <setAlarm_button_handle+0x54>
				hrtc.alarm->minute++;
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <setAlarm_button_handle+0x90>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	785a      	ldrb	r2, [r3, #1]
 800054c:	3201      	adds	r2, #1
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	705a      	strb	r2, [r3, #1]
			break;
 8000552:	e016      	b.n	8000582 <setAlarm_button_handle+0x82>
				hrtc.alarm->minute = 0;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <setAlarm_button_handle+0x90>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	705a      	strb	r2, [r3, #1]
			break;
 800055c:	e011      	b.n	8000582 <setAlarm_button_handle+0x82>
			if(hrtc.alarm->second < 59)
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <setAlarm_button_handle+0x90>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b3a      	cmp	r3, #58	; 0x3a
 8000566:	d806      	bhi.n	8000576 <setAlarm_button_handle+0x76>
				hrtc.alarm->second++;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <setAlarm_button_handle+0x90>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	3201      	adds	r2, #1
 8000570:	b2d2      	uxtb	r2, r2
 8000572:	701a      	strb	r2, [r3, #0]
			break;
 8000574:	e005      	b.n	8000582 <setAlarm_button_handle+0x82>
				hrtc.alarm->second = 0;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <setAlarm_button_handle+0x90>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
			break;
 800057e:	e000      	b.n	8000582 <setAlarm_button_handle+0x82>
		default: break;
 8000580:	bf00      	nop
	}
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000095 	.word	0x20000095
 8000590:	20000078 	.word	0x20000078

08000594 <start_button_short_press_handle>:

static void start_button_short_press_handle()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	switch (ac_state)
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <start_button_short_press_handle+0x60>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d00c      	beq.n	80005ba <start_button_short_press_handle+0x26>
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	dc24      	bgt.n	80005ee <start_button_short_press_handle+0x5a>
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d002      	beq.n	80005ae <start_button_short_press_handle+0x1a>
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d003      	beq.n	80005b4 <start_button_short_press_handle+0x20>
				HAL_TIM_Base_Stop(stop_watch.htim);
			else
				HAL_TIM_Base_Start_IT(stop_watch.htim);
			stop_watch.is_running =! stop_watch.is_running;
			break;
		default: break;
 80005ac:	e01f      	b.n	80005ee <start_button_short_press_handle+0x5a>
			setTime_button_handle();
 80005ae:	f7ff ff11 	bl	80003d4 <setTime_button_handle>
			break;
 80005b2:	e01d      	b.n	80005f0 <start_button_short_press_handle+0x5c>
			setAlarm_button_handle();
 80005b4:	f7ff ffa4 	bl	8000500 <setAlarm_button_handle>
			break;
 80005b8:	e01a      	b.n	80005f0 <start_button_short_press_handle+0x5c>
			if(stop_watch.is_running)
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <start_button_short_press_handle+0x64>)
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d005      	beq.n	80005ce <start_button_short_press_handle+0x3a>
				HAL_TIM_Base_Stop(stop_watch.htim);
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <start_button_short_press_handle+0x64>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f8bf 	bl	800374a <HAL_TIM_Base_Stop>
 80005cc:	e004      	b.n	80005d8 <start_button_short_press_handle+0x44>
				HAL_TIM_Base_Start_IT(stop_watch.htim);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <start_button_short_press_handle+0x64>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f8e0 	bl	8003798 <HAL_TIM_Base_Start_IT>
			stop_watch.is_running =! stop_watch.is_running;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <start_button_short_press_handle+0x64>)
 80005da:	799b      	ldrb	r3, [r3, #6]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf0c      	ite	eq
 80005e0:	2301      	moveq	r3, #1
 80005e2:	2300      	movne	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <start_button_short_press_handle+0x64>)
 80005ea:	719a      	strb	r2, [r3, #6]
			break;
 80005ec:	e000      	b.n	80005f0 <start_button_short_press_handle+0x5c>
		default: break;
 80005ee:	bf00      	nop
	}
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000094 	.word	0x20000094
 80005f8:	200000f4 	.word	0x200000f4

080005fc <mode_button_short_press_handle>:

static void mode_button_short_press_handle()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	switch (ac_state)
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <mode_button_short_press_handle+0x6c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d021      	beq.n	800064c <mode_button_short_press_handle+0x50>
 8000608:	2b03      	cmp	r3, #3
 800060a:	dc29      	bgt.n	8000660 <mode_button_short_press_handle+0x64>
 800060c:	2b01      	cmp	r3, #1
 800060e:	d002      	beq.n	8000616 <mode_button_short_press_handle+0x1a>
 8000610:	2b02      	cmp	r3, #2
 8000612:	d00a      	beq.n	800062a <mode_button_short_press_handle+0x2e>
		case STOP_WATCH:
			ac_state = NORMAL;
			lcd_clear_display(&hlcd);
			HAL_Delay(1);
			break;
		default: break;
 8000614:	e024      	b.n	8000660 <mode_button_short_press_handle+0x64>
			ac_state = NORMAL;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <mode_button_short_press_handle+0x6c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <mode_button_short_press_handle+0x70>)
 800061e:	f000 fcdd 	bl	8000fdc <lcd_clear_display>
			HAL_Delay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f001 f930 	bl	8001888 <HAL_Delay>
			break;
 8000628:	e01b      	b.n	8000662 <mode_button_short_press_handle+0x66>
			RTC_setAlarm(&hrtc);
 800062a:	4811      	ldr	r0, [pc, #68]	; (8000670 <mode_button_short_press_handle+0x74>)
 800062c:	f000 fc2e 	bl	8000e8c <RTC_setAlarm>
			ac_state = NORMAL;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <mode_button_short_press_handle+0x6c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <mode_button_short_press_handle+0x70>)
 8000638:	f000 fcd0 	bl	8000fdc <lcd_clear_display>
			HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f001 f923 	bl	8001888 <HAL_Delay>
			hrtc.alarm->alarm_on_flag = 1;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <mode_button_short_press_handle+0x74>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2201      	movs	r2, #1
 8000648:	711a      	strb	r2, [r3, #4]
			break;
 800064a:	e00a      	b.n	8000662 <mode_button_short_press_handle+0x66>
			ac_state = NORMAL;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <mode_button_short_press_handle+0x6c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <mode_button_short_press_handle+0x70>)
 8000654:	f000 fcc2 	bl	8000fdc <lcd_clear_display>
			HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f001 f915 	bl	8001888 <HAL_Delay>
			break;
 800065e:	e000      	b.n	8000662 <mode_button_short_press_handle+0x66>
		default: break;
 8000660:	bf00      	nop
	}
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000094 	.word	0x20000094
 800066c:	20000088 	.word	0x20000088
 8000670:	20000078 	.word	0x20000078

08000674 <light_button_short_press_handle>:

static void light_button_short_press_handle()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if(hrtc.alarm->flag == 0)
 8000678:	4b45      	ldr	r3, [pc, #276]	; (8000790 <light_button_short_press_handle+0x11c>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d179      	bne.n	8000776 <light_button_short_press_handle+0x102>
	{
		switch (ac_state)
 8000682:	4b44      	ldr	r3, [pc, #272]	; (8000794 <light_button_short_press_handle+0x120>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d87e      	bhi.n	8000788 <light_button_short_press_handle+0x114>
 800068a:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <light_button_short_press_handle+0x1c>)
 800068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000690:	080006a1 	.word	0x080006a1
 8000694:	080006b7 	.word	0x080006b7
 8000698:	08000711 	.word	0x08000711
 800069c:	08000743 	.word	0x08000743
		{
			case NORMAL:
				hrtc.backLight_state =! hrtc.backLight_state;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <light_button_short_press_handle+0x11c>)
 80006a2:	7b1b      	ldrb	r3, [r3, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf0c      	ite	eq
 80006a8:	2301      	moveq	r3, #1
 80006aa:	2300      	movne	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <light_button_short_press_handle+0x11c>)
 80006b2:	731a      	strb	r2, [r3, #12]
				break;
 80006b4:	e069      	b.n	800078a <light_button_short_press_handle+0x116>
			case SET_TIME:
				switch(setTime_state)
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <light_button_short_press_handle+0x124>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b05      	cmp	r3, #5
 80006bc:	d826      	bhi.n	800070c <light_button_short_press_handle+0x98>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <light_button_short_press_handle+0x50>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006dd 	.word	0x080006dd
 80006c8:	080006e5 	.word	0x080006e5
 80006cc:	080006ed 	.word	0x080006ed
 80006d0:	080006f5 	.word	0x080006f5
 80006d4:	080006fd 	.word	0x080006fd
 80006d8:	08000705 	.word	0x08000705
				{
				case hour:
					setTime_state = min;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <light_button_short_press_handle+0x124>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
					break;
 80006e2:	e014      	b.n	800070e <light_button_short_press_handle+0x9a>
				case min:
					setTime_state = sec;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <light_button_short_press_handle+0x124>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	701a      	strb	r2, [r3, #0]
					break;
 80006ea:	e010      	b.n	800070e <light_button_short_press_handle+0x9a>
				case sec:
					setTime_state = date;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <light_button_short_press_handle+0x124>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	701a      	strb	r2, [r3, #0]
					break;
 80006f2:	e00c      	b.n	800070e <light_button_short_press_handle+0x9a>
				case date:
					setTime_state = month;
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <light_button_short_press_handle+0x124>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	701a      	strb	r2, [r3, #0]
					break;
 80006fa:	e008      	b.n	800070e <light_button_short_press_handle+0x9a>
				case month:
					setTime_state = year;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <light_button_short_press_handle+0x124>)
 80006fe:	2205      	movs	r2, #5
 8000700:	701a      	strb	r2, [r3, #0]
					break;
 8000702:	e004      	b.n	800070e <light_button_short_press_handle+0x9a>
				case year:
					setTime_state = hour;
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <light_button_short_press_handle+0x124>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
					break;
 800070a:	e000      	b.n	800070e <light_button_short_press_handle+0x9a>
				default: break;
 800070c:	bf00      	nop
				}
				break;
 800070e:	e03c      	b.n	800078a <light_button_short_press_handle+0x116>
			case SET_ALARM:
				switch(setTime_state)
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <light_button_short_press_handle+0x124>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d00e      	beq.n	8000736 <light_button_short_press_handle+0xc2>
 8000718:	2b02      	cmp	r3, #2
 800071a:	dc10      	bgt.n	800073e <light_button_short_press_handle+0xca>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <light_button_short_press_handle+0xb2>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d004      	beq.n	800072e <light_button_short_press_handle+0xba>
					setTime_state = sec;
					break;
				case sec:
					setTime_state = hour;
					break;
				default: break;
 8000724:	e00b      	b.n	800073e <light_button_short_press_handle+0xca>
					setTime_state = min;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <light_button_short_press_handle+0x124>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
					break;
 800072c:	e008      	b.n	8000740 <light_button_short_press_handle+0xcc>
					setTime_state = sec;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <light_button_short_press_handle+0x124>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
					break;
 8000734:	e004      	b.n	8000740 <light_button_short_press_handle+0xcc>
					setTime_state = hour;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <light_button_short_press_handle+0x124>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
					break;
 800073c:	e000      	b.n	8000740 <light_button_short_press_handle+0xcc>
				default: break;
 800073e:	bf00      	nop
				}
				break;
 8000740:	e023      	b.n	800078a <light_button_short_press_handle+0x116>
			case STOP_WATCH:
				HAL_TIM_Base_Stop(stop_watch.htim);
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <light_button_short_press_handle+0x128>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	4618      	mov	r0, r3
 8000748:	f002 ffff 	bl	800374a <HAL_TIM_Base_Stop>
				stop_watch.htim->Instance->CNT = 0;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <light_button_short_press_handle+0x128>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24

				stop_watch.hour = 0;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <light_button_short_press_handle+0x128>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
				stop_watch.min = 0;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <light_button_short_press_handle+0x128>)
 800075e:	2200      	movs	r2, #0
 8000760:	705a      	strb	r2, [r3, #1]
				stop_watch.sec = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <light_button_short_press_handle+0x128>)
 8000764:	2200      	movs	r2, #0
 8000766:	709a      	strb	r2, [r3, #2]
				stop_watch.ms = 0;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <light_button_short_press_handle+0x128>)
 800076a:	2200      	movs	r2, #0
 800076c:	809a      	strh	r2, [r3, #4]
				stop_watch.is_running = 0;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <light_button_short_press_handle+0x128>)
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
				break;
 8000774:	e009      	b.n	800078a <light_button_short_press_handle+0x116>

		}
	}
	else
	{
		hrtc.alarm->flag = 0;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <light_button_short_press_handle+0x11c>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	2200      	movs	r2, #0
 800077c:	70da      	strb	r2, [r3, #3]
		hrtc.alarm->alarm_on_flag = 0;
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <light_button_short_press_handle+0x11c>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	2200      	movs	r2, #0
 8000784:	711a      	strb	r2, [r3, #4]
	}
}
 8000786:	e000      	b.n	800078a <light_button_short_press_handle+0x116>
			default: break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078
 8000794:	20000094 	.word	0x20000094
 8000798:	20000095 	.word	0x20000095
 800079c:	200000f4 	.word	0x200000f4

080007a0 <button_press_1sTimeout_callback>:

void button_press_1sTimeout_callback(Button_Handle_Typedef *ButtonX)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if(ButtonX == &mode_button)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <button_press_1sTimeout_callback+0x30>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d10b      	bne.n	80007c8 <button_press_1sTimeout_callback+0x28>
	{
		ac_state = SET_TIME;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <button_press_1sTimeout_callback+0x34>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
		setTime_state = hour;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <button_press_1sTimeout_callback+0x38>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <button_press_1sTimeout_callback+0x3c>)
 80007be:	f000 fc0d 	bl	8000fdc <lcd_clear_display>
		HAL_Delay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 f860 	bl	8001888 <HAL_Delay>
	}
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	20000094 	.word	0x20000094
 80007d8:	20000095 	.word	0x20000095
 80007dc:	20000088 	.word	0x20000088

080007e0 <button_press_2sTimeout_callback>:

void button_press_2sTimeout_callback(Button_Handle_Typedef *ButtonX)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if(ButtonX == &mode_button)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <button_press_2sTimeout_callback+0x30>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d10b      	bne.n	8000808 <button_press_2sTimeout_callback+0x28>
	{
		ac_state = SET_ALARM;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <button_press_2sTimeout_callback+0x34>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	701a      	strb	r2, [r3, #0]
		setTime_state = hour;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <button_press_2sTimeout_callback+0x38>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <button_press_2sTimeout_callback+0x3c>)
 80007fe:	f000 fbed 	bl	8000fdc <lcd_clear_display>
		HAL_Delay(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f001 f840 	bl	8001888 <HAL_Delay>
	}
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000b4 	.word	0x200000b4
 8000814:	20000094 	.word	0x20000094
 8000818:	20000095 	.word	0x20000095
 800081c:	20000088 	.word	0x20000088

08000820 <button_press_3sTimeout_callback>:

void button_press_3sTimeout_callback(Button_Handle_Typedef *ButtonX)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	if(ButtonX == &mode_button)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <button_press_3sTimeout_callback+0x2c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d108      	bne.n	8000842 <button_press_3sTimeout_callback+0x22>
	{
		ac_state = STOP_WATCH;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <button_press_3sTimeout_callback+0x30>)
 8000832:	2203      	movs	r2, #3
 8000834:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <button_press_3sTimeout_callback+0x34>)
 8000838:	f000 fbd0 	bl	8000fdc <lcd_clear_display>
		HAL_Delay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f001 f823 	bl	8001888 <HAL_Delay>
	}
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000b4 	.word	0x200000b4
 8000850:	20000094 	.word	0x20000094
 8000854:	20000088 	.word	0x20000088

08000858 <button_short_press_callback>:

void button_short_press_callback(Button_Handle_Typedef *ButtonX)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if(ButtonX == &mode_button)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <button_short_press_callback+0x34>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d101      	bne.n	800086c <button_short_press_callback+0x14>
		mode_button_short_press_handle();
 8000868:	f7ff fec8 	bl	80005fc <mode_button_short_press_handle>
	if(ButtonX == &start_button)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <button_short_press_callback+0x38>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d101      	bne.n	8000878 <button_short_press_callback+0x20>
		start_button_short_press_handle();
 8000874:	f7ff fe8e 	bl	8000594 <start_button_short_press_handle>
	if(ButtonX == &light_button)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a06      	ldr	r2, [pc, #24]	; (8000894 <button_short_press_callback+0x3c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d101      	bne.n	8000884 <button_short_press_callback+0x2c>
		light_button_short_press_handle();
 8000880:	f7ff fef8 	bl	8000674 <light_button_short_press_handle>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200000b4 	.word	0x200000b4
 8000890:	20000098 	.word	0x20000098
 8000894:	200000d0 	.word	0x200000d0

08000898 <alarmClock_init>:

void alarmClock_init(I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htim, timedate *td, GPIO_TypeDef *start_button_Port, uint16_t start_button_Pin,
		 GPIO_TypeDef *mode_button_Port, uint16_t mode_button_Pin, GPIO_TypeDef *light_button_Port, uint16_t light_button_Pin		)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
	lcd_init(&hlcd, hi2c, LCD_ADDR_DEFAULT);
 80008a6:	2227      	movs	r2, #39	; 0x27
 80008a8:	68f9      	ldr	r1, [r7, #12]
 80008aa:	4823      	ldr	r0, [pc, #140]	; (8000938 <alarmClock_init+0xa0>)
 80008ac:	f000 fc47 	bl	800113e <lcd_init>
	RTC_init(&hrtc, hi2c);
 80008b0:	68f9      	ldr	r1, [r7, #12]
 80008b2:	4822      	ldr	r0, [pc, #136]	; (800093c <alarmClock_init+0xa4>)
 80008b4:	f000 fa38 	bl	8000d28 <RTC_init>
	button_init(&start_button, start_button_Port, start_button_Pin);
 80008b8:	8b3b      	ldrh	r3, [r7, #24]
 80008ba:	461a      	mov	r2, r3
 80008bc:	6839      	ldr	r1, [r7, #0]
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <alarmClock_init+0xa8>)
 80008c0:	f000 f93a 	bl	8000b38 <button_init>
	button_init(&mode_button, mode_button_Port, mode_button_Pin);
 80008c4:	8c3b      	ldrh	r3, [r7, #32]
 80008c6:	461a      	mov	r2, r3
 80008c8:	69f9      	ldr	r1, [r7, #28]
 80008ca:	481e      	ldr	r0, [pc, #120]	; (8000944 <alarmClock_init+0xac>)
 80008cc:	f000 f934 	bl	8000b38 <button_init>
	button_init(&light_button, light_button_Port, light_button_Pin);
 80008d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008d2:	461a      	mov	r2, r3
 80008d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008d6:	481c      	ldr	r0, [pc, #112]	; (8000948 <alarmClock_init+0xb0>)
 80008d8:	f000 f92e 	bl	8000b38 <button_init>

	hrtc.td = td;
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <alarmClock_init+0xa4>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6053      	str	r3, [r2, #4]
	RTC_writeTime(&hrtc);
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <alarmClock_init+0xa4>)
 80008e4:	f000 fa30 	bl	8000d48 <RTC_writeTime>

	alarm.hour = 0;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <alarmClock_init+0xb4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	709a      	strb	r2, [r3, #2]
	alarm.minute = 0;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <alarmClock_init+0xb4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	705a      	strb	r2, [r3, #1]
	alarm.second = 0;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <alarmClock_init+0xb4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	alarm.flag = 0;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <alarmClock_init+0xb4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	70da      	strb	r2, [r3, #3]
	alarm.alarm_on_flag = 0;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <alarmClock_init+0xb4>)
 8000902:	2200      	movs	r2, #0
 8000904:	711a      	strb	r2, [r3, #4]
	hrtc.alarm = &alarm;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <alarmClock_init+0xa4>)
 8000908:	4a10      	ldr	r2, [pc, #64]	; (800094c <alarmClock_init+0xb4>)
 800090a:	609a      	str	r2, [r3, #8]

	stop_watch.hour = 0;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <alarmClock_init+0xb8>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	stop_watch.min = 0;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <alarmClock_init+0xb8>)
 8000914:	2200      	movs	r2, #0
 8000916:	705a      	strb	r2, [r3, #1]
	stop_watch.sec = 0;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <alarmClock_init+0xb8>)
 800091a:	2200      	movs	r2, #0
 800091c:	709a      	strb	r2, [r3, #2]
	stop_watch.ms = 0;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <alarmClock_init+0xb8>)
 8000920:	2200      	movs	r2, #0
 8000922:	809a      	strh	r2, [r3, #4]
	stop_watch.is_running = 0;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <alarmClock_init+0xb8>)
 8000926:	2200      	movs	r2, #0
 8000928:	719a      	strb	r2, [r3, #6]
	stop_watch.htim = htim;
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <alarmClock_init+0xb8>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	6093      	str	r3, [r2, #8]
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000088 	.word	0x20000088
 800093c:	20000078 	.word	0x20000078
 8000940:	20000098 	.word	0x20000098
 8000944:	200000b4 	.word	0x200000b4
 8000948:	200000d0 	.word	0x200000d0
 800094c:	200000ec 	.word	0x200000ec
 8000950:	200000f4 	.word	0x200000f4

08000954 <alarmClock_display_handle>:

void alarmClock_display_handle()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	RTC_readTime(&hrtc);
 8000958:	481b      	ldr	r0, [pc, #108]	; (80009c8 <alarmClock_display_handle+0x74>)
 800095a:	f000 fa41 	bl	8000de0 <RTC_readTime>
	switch (ac_state)
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <alarmClock_display_handle+0x78>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b03      	cmp	r3, #3
 8000964:	d82d      	bhi.n	80009c2 <alarmClock_display_handle+0x6e>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <alarmClock_display_handle+0x18>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	0800097d 	.word	0x0800097d
 8000970:	080009a1 	.word	0x080009a1
 8000974:	080009a7 	.word	0x080009a7
 8000978:	080009ad 	.word	0x080009ad
	{
	case NORMAL:
		if(alarm.flag != 1)
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <alarmClock_display_handle+0x7c>)
 800097e:	78db      	ldrb	r3, [r3, #3]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d01d      	beq.n	80009c0 <alarmClock_display_handle+0x6c>
		{
			alarmClock_NORMAL_display();
 8000984:	f7ff fbea 	bl	800015c <alarmClock_NORMAL_display>
			if(hrtc.backLight_state == 1)
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <alarmClock_display_handle+0x74>)
 800098a:	7b1b      	ldrb	r3, [r3, #12]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d103      	bne.n	8000998 <alarmClock_display_handle+0x44>
				lcd_backlight_on(&hlcd);
 8000990:	4810      	ldr	r0, [pc, #64]	; (80009d4 <alarmClock_display_handle+0x80>)
 8000992:	f000 fb32 	bl	8000ffa <lcd_backlight_on>
			else
				lcd_backlight_off(&hlcd);
		}
		break;
 8000996:	e013      	b.n	80009c0 <alarmClock_display_handle+0x6c>
				lcd_backlight_off(&hlcd);
 8000998:	480e      	ldr	r0, [pc, #56]	; (80009d4 <alarmClock_display_handle+0x80>)
 800099a:	f000 fb46 	bl	800102a <lcd_backlight_off>
		break;
 800099e:	e00f      	b.n	80009c0 <alarmClock_display_handle+0x6c>
	case SET_TIME:
		alarmClock_SET_TIME_display();
 80009a0:	f7ff fc8c 	bl	80002bc <alarmClock_SET_TIME_display>
		break;
 80009a4:	e00d      	b.n	80009c2 <alarmClock_display_handle+0x6e>
	case SET_ALARM:
		alarmClock_SET_ALARM_display();
 80009a6:	f7ff fcc3 	bl	8000330 <alarmClock_SET_ALARM_display>
		break;
 80009aa:	e00a      	b.n	80009c2 <alarmClock_display_handle+0x6e>
	case STOP_WATCH:
		stop_watch.ms = (uint16_t)stop_watch.htim->Instance->CNT;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <alarmClock_display_handle+0x84>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <alarmClock_display_handle+0x84>)
 80009b8:	809a      	strh	r2, [r3, #4]
		alarmClock_STOP_WATCH_display();
 80009ba:	f7ff fcdb 	bl	8000374 <alarmClock_STOP_WATCH_display>
		break;
 80009be:	e000      	b.n	80009c2 <alarmClock_display_handle+0x6e>
		break;
 80009c0:	bf00      	nop
	}
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000078 	.word	0x20000078
 80009cc:	20000094 	.word	0x20000094
 80009d0:	200000ec 	.word	0x200000ec
 80009d4:	20000088 	.word	0x20000088
 80009d8:	200000f4 	.word	0x200000f4

080009dc <alarmClock_buttons_handle>:

void alarmClock_buttons_handle()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	button_handle(&start_button);
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <alarmClock_buttons_handle+0x1c>)
 80009e2:	f000 f8ef 	bl	8000bc4 <button_handle>
	button_handle(&mode_button);
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <alarmClock_buttons_handle+0x20>)
 80009e8:	f000 f8ec 	bl	8000bc4 <button_handle>
	button_handle(&light_button);
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <alarmClock_buttons_handle+0x24>)
 80009ee:	f000 f8e9 	bl	8000bc4 <button_handle>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000098 	.word	0x20000098
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	200000d0 	.word	0x200000d0

08000a04 <alarmClock_alarm_handle>:

void alarmClock_alarm_handle()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	static uint32_t alarm_blink_t;
	if(!hrtc.alarm->flag && hrtc.alarm->alarm_on_flag)
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	78db      	ldrb	r3, [r3, #3]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d120      	bne.n	8000a54 <alarmClock_alarm_handle+0x50>
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01b      	beq.n	8000a54 <alarmClock_alarm_handle+0x50>
	{
		if(hrtc.td->hour == hrtc.alarm->hour && hrtc.td->minute == hrtc.alarm->minute && hrtc.td->second == hrtc.alarm->second)
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	789a      	ldrb	r2, [r3, #2]
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d113      	bne.n	8000a54 <alarmClock_alarm_handle+0x50>
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	785a      	ldrb	r2, [r3, #1]
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d10b      	bne.n	8000a54 <alarmClock_alarm_handle+0x50>
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d103      	bne.n	8000a54 <alarmClock_alarm_handle+0x50>
			hrtc.alarm->flag = 1;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	2201      	movs	r2, #1
 8000a52:	70da      	strb	r2, [r3, #3]
	}
	if(hrtc.alarm->flag && hrtc.alarm->alarm_on_flag)
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	78db      	ldrb	r3, [r3, #3]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d027      	beq.n	8000aae <alarmClock_alarm_handle+0xaa>
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	791b      	ldrb	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d022      	beq.n	8000aae <alarmClock_alarm_handle+0xaa>
	{
//			RTC_alarm_callback(hrtc);
		if(HAL_GetTick() - alarm_blink_t >= 1000)
 8000a68:	f000 ff04 	bl	8001874 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <alarmClock_alarm_handle+0xb4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a78:	d319      	bcc.n	8000aae <alarmClock_alarm_handle+0xaa>
		{
			if(hrtc.backLight_state)
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a7c:	7b1b      	ldrb	r3, [r3, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <alarmClock_alarm_handle+0x86>
				lcd_backlight_off(&hlcd);
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <alarmClock_alarm_handle+0xb8>)
 8000a84:	f000 fad1 	bl	800102a <lcd_backlight_off>
 8000a88:	e002      	b.n	8000a90 <alarmClock_alarm_handle+0x8c>
			else
				lcd_backlight_on(&hlcd);
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <alarmClock_alarm_handle+0xb8>)
 8000a8c:	f000 fab5 	bl	8000ffa <lcd_backlight_on>
			hrtc.backLight_state =! hrtc.backLight_state;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000a92:	7b1b      	ldrb	r3, [r3, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <alarmClock_alarm_handle+0xb0>)
 8000aa2:	731a      	strb	r2, [r3, #12]
			alarm_blink_t = HAL_GetTick();
 8000aa4:	f000 fee6 	bl	8001874 <HAL_GetTick>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <alarmClock_alarm_handle+0xb4>)
 8000aac:	6013      	str	r3, [r2, #0]
//			alarmClock_ALARM_RING_display();

		}

	}
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000078 	.word	0x20000078
 8000ab8:	20000100 	.word	0x20000100
 8000abc:	20000088 	.word	0x20000088

08000ac0 <alarmClock_STOP_WATCH_TIM_IT_handle>:

void alarmClock_STOP_WATCH_TIM_IT_handle()
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	if(stop_watch.sec < 59)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	2b3a      	cmp	r3, #58	; 0x3a
 8000aca:	d806      	bhi.n	8000ada <alarmClock_STOP_WATCH_TIM_IT_handle+0x1a>
		stop_watch.sec++;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000ace:	789b      	ldrb	r3, [r3, #2]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000ad6:	709a      	strb	r2, [r3, #2]
		{
			stop_watch.min = 0;
			stop_watch.hour++;
		}
	}
}
 8000ad8:	e016      	b.n	8000b08 <alarmClock_STOP_WATCH_TIM_IT_handle+0x48>
		stop_watch.sec = 0;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	709a      	strb	r2, [r3, #2]
		if(stop_watch.min < 59)
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	2b3a      	cmp	r3, #58	; 0x3a
 8000ae6:	d806      	bhi.n	8000af6 <alarmClock_STOP_WATCH_TIM_IT_handle+0x36>
			stop_watch.min++;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000af2:	705a      	strb	r2, [r3, #1]
}
 8000af4:	e008      	b.n	8000b08 <alarmClock_STOP_WATCH_TIM_IT_handle+0x48>
			stop_watch.min = 0;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	705a      	strb	r2, [r3, #1]
			stop_watch.hour++;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <alarmClock_STOP_WATCH_TIM_IT_handle+0x50>)
 8000b06:	701a      	strb	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	200000f4 	.word	0x200000f4

08000b14 <button_press_callback>:
 *      Author: phamh
 */

#include "button.h"
__weak void button_press_callback(Button_Handle_Typedef *ButtonX)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <button_release_callback>:

__weak void button_release_callback(Button_Handle_Typedef *ButtonX)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]

}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <button_init>:
__weak void button_press_3sTimeout_callback(Button_Handle_Typedef *ButtonX)
{

}
void button_init(Button_Handle_Typedef *ButtonX,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	615a      	str	r2, [r3, #20]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	88fa      	ldrh	r2, [r7, #6]
 8000b50:	831a      	strh	r2, [r3, #24]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <button_filter>:

static void button_filter(Button_Handle_Typedef *ButtonX)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

	uint8_t button_state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	8b1b      	ldrh	r3, [r3, #24]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f001 f940 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]

	//đang nhiễu
	if(button_state != ButtonX->button_debounce)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7c1b      	ldrb	r3, [r3, #16]
 8000b7c:	7bfa      	ldrb	r2, [r7, #15]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d00a      	beq.n	8000b98 <button_filter+0x3c>
	{
		ButtonX->is_debouncing = 1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	721a      	strb	r2, [r3, #8]
		ButtonX->button_debounce = button_state;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	741a      	strb	r2, [r3, #16]
		ButtonX->t_debounce = HAL_GetTick();
 8000b8e:	f000 fe71 	bl	8001874 <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
	}
	//check nếu đang nhiễu và thời gian nhiễu gần nhất cách >= 15ms
	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->t_debounce >= 15))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00d      	beq.n	8000bbc <button_filter+0x60>
 8000ba0:	f000 fe68 	bl	8001874 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b0e      	cmp	r3, #14
 8000bae:	d905      	bls.n	8000bbc <button_filter+0x60>
	{
		ButtonX->is_debouncing= 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
		ButtonX->key_current = button_state;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	705a      	strb	r2, [r3, #1]
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <button_handle>:
uint8_t count;
void button_handle(Button_Handle_Typedef *ButtonX)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	button_filter(ButtonX);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffc5 	bl	8000b5c <button_filter>

	if(ButtonX->key_current != ButtonX->key_last)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	785a      	ldrb	r2, [r3, #1]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d02b      	beq.n	8000c36 <button_handle+0x72>
	{
		//nhấn nút
		if(ButtonX->key_current == 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	785b      	ldrb	r3, [r3, #1]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10b      	bne.n	8000bfe <button_handle+0x3a>
		{
			ButtonX->is_pressing = 1;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	709a      	strb	r2, [r3, #2]
			ButtonX->t_press = HAL_GetTick();
 8000bec:	f000 fe42 	bl	8001874 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	605a      	str	r2, [r3, #4]
			button_press_callback(ButtonX);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff8c 	bl	8000b14 <button_press_callback>
 8000bfc:	e017      	b.n	8000c2e <button_handle+0x6a>
		}
		//nhả nút
		else
		{
			ButtonX->is_pressing = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	709a      	strb	r2, [r3, #2]
			//short press
			if(HAL_GetTick() - ButtonX->t_press <= 1000)
 8000c04:	f000 fe36 	bl	8001874 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c14:	d808      	bhi.n	8000c28 <button_handle+0x64>
			{
				count++;
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <button_handle+0xe8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <button_handle+0xe8>)
 8000c20:	701a      	strb	r2, [r3, #0]
				button_short_press_callback(ButtonX);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fe18 	bl	8000858 <button_short_press_callback>
			}
			button_release_callback(ButtonX);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff7c 	bl	8000b26 <button_release_callback>


		}
		ButtonX->key_last = ButtonX->key_current;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	785a      	ldrb	r2, [r3, #1]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	701a      	strb	r2, [r3, #0]
	}

	//long press
	if(ButtonX->is_pressing && HAL_GetTick() - ButtonX->t_press >= 3000)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	789b      	ldrb	r3, [r3, #2]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d010      	beq.n	8000c60 <button_handle+0x9c>
 8000c3e:	f000 fe19 	bl	8001874 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d906      	bls.n	8000c60 <button_handle+0x9c>
	{
		button_press_3sTimeout_callback(ButtonX);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fde4 	bl	8000820 <button_press_3sTimeout_callback>
		ButtonX->is_pressing = 0;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	709a      	strb	r2, [r3, #2]
 8000c5e:	e021      	b.n	8000ca4 <button_handle+0xe0>
	}
	else if(ButtonX->is_pressing && HAL_GetTick() - ButtonX->t_press >= 2000)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00c      	beq.n	8000c82 <button_handle+0xbe>
 8000c68:	f000 fe04 	bl	8001874 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c78:	d303      	bcc.n	8000c82 <button_handle+0xbe>
	{
		button_press_2sTimeout_callback(ButtonX);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fdb0 	bl	80007e0 <button_press_2sTimeout_callback>
 8000c80:	e010      	b.n	8000ca4 <button_handle+0xe0>
	}
	else if(ButtonX->is_pressing && HAL_GetTick() - ButtonX->t_press >= 1000)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	789b      	ldrb	r3, [r3, #2]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00c      	beq.n	8000ca4 <button_handle+0xe0>
 8000c8a:	f000 fdf3 	bl	8001874 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c9a:	d303      	bcc.n	8000ca4 <button_handle+0xe0>
	{
		button_press_1sTimeout_callback(ButtonX);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fd7f 	bl	80007a0 <button_press_1sTimeout_callback>
	}
}
 8000ca2:	e7ff      	b.n	8000ca4 <button_handle+0xe0>
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000104 	.word	0x20000104

08000cb0 <Dec2BCD>:
 */

#include "DS3231.h"

uint8_t Dec2BCD(uint8_t time)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	return (time/10)<<4 | (time%10);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <Dec2BCD+0x44>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	b258      	sxtb	r0, r3
 8000cca:	79fa      	ldrb	r2, [r7, #7]
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <Dec2BCD+0x44>)
 8000cce:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd2:	08d9      	lsrs	r1, r3, #3
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	440b      	add	r3, r1
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	b2db      	uxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	cccccccd 	.word	0xcccccccd

08000cf8 <BCD2Dec>:

uint8_t BCD2Dec(uint8_t time)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	return (time>>4)*10 + (time & 0x0F);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2db      	uxtb	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <RTC_init>:

void RTC_init(RTC_Handle_Typedef *hrtc, I2C_HandleTypeDef *hi2c)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	hrtc->RTC_I2C = hi2c;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	601a      	str	r2, [r3, #0]
	hrtc->backLight_state = 0;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	731a      	strb	r2, [r3, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <RTC_writeTime>:

void RTC_writeTime(RTC_Handle_Typedef *hrtc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	6078      	str	r0, [r7, #4]
	uint8_t buff[8];
	buff[0] = 0x00;
 8000d50:	2300      	movs	r3, #0
 8000d52:	723b      	strb	r3, [r7, #8]
	buff[1] = Dec2BCD(hrtc->td->second);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa8 	bl	8000cb0 <Dec2BCD>
 8000d60:	4603      	mov	r3, r0
 8000d62:	727b      	strb	r3, [r7, #9]
	buff[2] = Dec2BCD(hrtc->td->minute);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ffa0 	bl	8000cb0 <Dec2BCD>
 8000d70:	4603      	mov	r3, r0
 8000d72:	72bb      	strb	r3, [r7, #10]
	buff[3] = Dec2BCD(hrtc->td->hour);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff98 	bl	8000cb0 <Dec2BCD>
 8000d80:	4603      	mov	r3, r0
 8000d82:	72fb      	strb	r3, [r7, #11]
	buff[4] = Dec2BCD(hrtc->td->day);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	78db      	ldrb	r3, [r3, #3]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff90 	bl	8000cb0 <Dec2BCD>
 8000d90:	4603      	mov	r3, r0
 8000d92:	733b      	strb	r3, [r7, #12]
	buff[5] = Dec2BCD(hrtc->td->date);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	791b      	ldrb	r3, [r3, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff88 	bl	8000cb0 <Dec2BCD>
 8000da0:	4603      	mov	r3, r0
 8000da2:	737b      	strb	r3, [r7, #13]
	buff[6] = Dec2BCD(hrtc->td->month);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <Dec2BCD>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73bb      	strb	r3, [r7, #14]
	buff[7] = Dec2BCD(hrtc->td->year);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff78 	bl	8000cb0 <Dec2BCD>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hrtc->RTC_I2C, DS3231_ADRS, buff, 8, 100);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	f107 0208 	add.w	r2, r7, #8
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	21d0      	movs	r1, #208	; 0xd0
 8000dd4:	f001 f96a 	bl	80020ac <HAL_I2C_Master_Transmit>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <RTC_readTime>:

void RTC_readTime(RTC_Handle_Typedef *hrtc)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	6078      	str	r0, [r7, #4]
	uint8_t buff[7];
	uint8_t address_reg = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hrtc->RTC_I2C, DS3231_ADRS, &address_reg, 1, 100);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	f107 020f 	add.w	r2, r7, #15
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	21d0      	movs	r1, #208	; 0xd0
 8000dfc:	f001 f956 	bl	80020ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hrtc->RTC_I2C, DS3231_ADRS, buff, 7, 100);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	f107 0210 	add.w	r2, r7, #16
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	21d0      	movs	r1, #208	; 0xd0
 8000e10:	f001 fa4a 	bl	80022a8 <HAL_I2C_Master_Receive>

	hrtc->td->second = BCD2Dec(buff[0]);
 8000e14:	7c3a      	ldrb	r2, [r7, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685c      	ldr	r4, [r3, #4]
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	f7ff ff6c 	bl	8000cf8 <BCD2Dec>
 8000e20:	4603      	mov	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
	hrtc->td->minute = BCD2Dec(buff[1]);
 8000e24:	7c7a      	ldrb	r2, [r7, #17]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685c      	ldr	r4, [r3, #4]
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f7ff ff64 	bl	8000cf8 <BCD2Dec>
 8000e30:	4603      	mov	r3, r0
 8000e32:	7063      	strb	r3, [r4, #1]
	hrtc->td->hour = BCD2Dec(buff[2]);
 8000e34:	7cba      	ldrb	r2, [r7, #18]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685c      	ldr	r4, [r3, #4]
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	f7ff ff5c 	bl	8000cf8 <BCD2Dec>
 8000e40:	4603      	mov	r3, r0
 8000e42:	70a3      	strb	r3, [r4, #2]
	hrtc->td->day = BCD2Dec(buff[3]);
 8000e44:	7cfa      	ldrb	r2, [r7, #19]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685c      	ldr	r4, [r3, #4]
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	f7ff ff54 	bl	8000cf8 <BCD2Dec>
 8000e50:	4603      	mov	r3, r0
 8000e52:	70e3      	strb	r3, [r4, #3]
	hrtc->td->date = BCD2Dec(buff[4]);
 8000e54:	7d3a      	ldrb	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685c      	ldr	r4, [r3, #4]
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	f7ff ff4c 	bl	8000cf8 <BCD2Dec>
 8000e60:	4603      	mov	r3, r0
 8000e62:	7123      	strb	r3, [r4, #4]
	hrtc->td->month = BCD2Dec(buff[5]);
 8000e64:	7d7a      	ldrb	r2, [r7, #21]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685c      	ldr	r4, [r3, #4]
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f7ff ff44 	bl	8000cf8 <BCD2Dec>
 8000e70:	4603      	mov	r3, r0
 8000e72:	7163      	strb	r3, [r4, #5]
	hrtc->td->year = BCD2Dec(buff[6]);
 8000e74:	7dba      	ldrb	r2, [r7, #22]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685c      	ldr	r4, [r3, #4]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	f7ff ff3c 	bl	8000cf8 <BCD2Dec>
 8000e80:	4603      	mov	r3, r0
 8000e82:	71a3      	strb	r3, [r4, #6]

}
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}

08000e8c <RTC_setAlarm>:

void RTC_setAlarm(RTC_Handle_Typedef *hrtc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	6078      	str	r0, [r7, #4]
	uint8_t buff[4];
	buff[0] = 0x07;
 8000e94:	2307      	movs	r3, #7
 8000e96:	733b      	strb	r3, [r7, #12]
	buff[1] = Dec2BCD(hrtc->alarm->second);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff06 	bl	8000cb0 <Dec2BCD>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	737b      	strb	r3, [r7, #13]
	buff[2] = Dec2BCD(hrtc->alarm->minute);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fefe 	bl	8000cb0 <Dec2BCD>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73bb      	strb	r3, [r7, #14]
	buff[3] = Dec2BCD(hrtc->alarm->hour);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fef6 	bl	8000cb0 <Dec2BCD>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hrtc->RTC_I2C, DS3231_ADRS, buff, 4, 100);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f107 020c 	add.w	r2, r7, #12
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	21d0      	movs	r1, #208	; 0xd0
 8000ed8:	f001 f8e8 	bl	80020ac <HAL_I2C_Master_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f023 030f 	bic.w	r3, r3, #15
 8000ef6:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7a5a      	ldrb	r2, [r3, #9]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7a5a      	ldrb	r2, [r3, #9]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7a5a      	ldrb	r2, [r3, #9]
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7a5a      	ldrb	r2, [r3, #9]
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6858      	ldr	r0, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b299      	uxth	r1, r3
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f001 f8ad 	bl	80020ac <HAL_I2C_Master_Transmit>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af02      	add	r7, sp, #8
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	f023 030f 	bic.w	r3, r3, #15
 8000f6c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7a5a      	ldrb	r2, [r3, #9]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f043 0305 	orr.w	r3, r3, #5
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7a5a      	ldrb	r2, [r3, #9]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a5a      	ldrb	r2, [r3, #9]
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f043 0305 	orr.w	r3, r3, #5
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7a5a      	ldrb	r2, [r3, #9]
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6858      	ldr	r0, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2304      	movs	r3, #4
 8000fd0:	f001 f86c 	bl	80020ac <HAL_I2C_Master_Transmit>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff7c 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 fc4b 	bl	8001888 <HAL_Delay>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_backlight_on>:
	lcd->DisplayControl |= LCD_DISPLAYON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}

void lcd_backlight_on(LiquidCrystal_I2C *lcd)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
	lcd->Backlightval = LCD_BACKLIGHT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2208      	movs	r2, #8
 8001006:	725a      	strb	r2, [r3, #9]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6858      	ldr	r0, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b299      	uxth	r1, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0209 	add.w	r2, r3, #9
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	f001 f845 	bl	80020ac <HAL_I2C_Master_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <lcd_backlight_off>:

void lcd_backlight_off(LiquidCrystal_I2C *lcd)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af02      	add	r7, sp, #8
 8001030:	6078      	str	r0, [r7, #4]
	lcd->Backlightval = LCD_NOBACKLIGHT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	725a      	strb	r2, [r3, #9]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b299      	uxth	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f103 0209 	add.w	r2, r3, #9
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	f001 f82d 	bl	80020ac <HAL_I2C_Master_Transmit>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <lcd_set_cursor>:

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	4613      	mov	r3, r2
 800106a:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <lcd_set_cursor+0x40>)
 800106e:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	3310      	adds	r3, #16
 8001074:	443b      	add	r3, r7
 8001076:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	4413      	add	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b25b      	sxtb	r3, r3
 8001082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001086:	b25b      	sxtb	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <lcd_send_cmd>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	54144000 	.word	0x54144000

080010a0 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a1b      	ldrb	r3, [r3, #8]
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7a1b      	ldrb	r3, [r3, #8]
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff0e 	bl	8000ee4 <lcd_send_cmd>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 80010d0:	b40e      	push	{r1, r2, r3}
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b08a      	sub	sp, #40	; 0x28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 80010da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010de:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fff7 	bl	80040dc <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010f4:	e00e      	b.n	8001114 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 80010f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fa:	3328      	adds	r3, #40	; 0x28
 80010fc:	443b      	add	r3, r7
 80010fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff28 	bl	8000f5a <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110e:	3301      	adds	r3, #1
 8001110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001114:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f815 	bl	800014c <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	429c      	cmp	r4, r3
 8001126:	d203      	bcs.n	8001130 <lcd_printf+0x60>
 8001128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d9e2      	bls.n	80010f6 <lcd_printf+0x26>
  }
}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800113a:	b003      	add	sp, #12
 800113c:	4770      	bx	lr

0800113e <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	4613      	mov	r3, r2
 800114a:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	7a1b      	ldrb	r3, [r3, #8]
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 800116a:	2133      	movs	r1, #51	; 0x33
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff feb9 	bl	8000ee4 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8001172:	2132      	movs	r1, #50	; 0x32
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff feb5 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);
 800117a:	2005      	movs	r0, #5
 800117c:	f000 fb84 	bl	8001888 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8001180:	2101      	movs	r1, #1
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff feae 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);
 8001188:	2005      	movs	r0, #5
 800118a:	f000 fb7d 	bl	8001888 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 800118e:	210c      	movs	r1, #12
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff fea7 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);
 8001196:	2005      	movs	r0, #5
 8001198:	f000 fb76 	bl	8001888 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 800119c:	2102      	movs	r1, #2
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff fea0 	bl	8000ee4 <lcd_send_cmd>
	HAL_Delay(5);
 80011a4:	2005      	movs	r0, #5
 80011a6:	f000 fb6f 	bl	8001888 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fe99 	bl	8000ee4 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff74 	bl	80010a0 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2208      	movs	r2, #8
 80011bc:	725a      	strb	r2, [r3, #9]
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
timedate td;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d101      	bne.n	80011e0 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  alarmClock_STOP_WATCH_TIM_IT_handle();
 80011dc:	f7ff fc70 	bl	8000ac0 <alarmClock_STOP_WATCH_TIM_IT_handle>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000015c 	.word	0x2000015c

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 fae7 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f83d 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 f927 	bl	800144c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011fe:	f000 f87f 	bl	8001300 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001202:	f000 f8f9 	bl	80013f8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001206:	f000 f8a9 	bl	800135c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  td.hour = 00;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <main+0x78>)
 800120c:	2200      	movs	r2, #0
 800120e:	709a      	strb	r2, [r3, #2]
  td.minute = 00;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <main+0x78>)
 8001212:	2200      	movs	r2, #0
 8001214:	705a      	strb	r2, [r3, #1]
  td.second = 30;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <main+0x78>)
 8001218:	221e      	movs	r2, #30
 800121a:	701a      	strb	r2, [r3, #0]
  td.day = 5;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <main+0x78>)
 800121e:	2205      	movs	r2, #5
 8001220:	70da      	strb	r2, [r3, #3]
  td.date = 9;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <main+0x78>)
 8001224:	2209      	movs	r2, #9
 8001226:	711a      	strb	r2, [r3, #4]
  td.month = 5;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <main+0x78>)
 800122a:	2205      	movs	r2, #5
 800122c:	715a      	strb	r2, [r3, #5]
  td.year = 24;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <main+0x78>)
 8001230:	2218      	movs	r2, #24
 8001232:	719a      	strb	r2, [r3, #6]
  alarmClock_init(&hi2c1, &htim2, &td, Start_Stop_GPIO_Port, Start_Stop_Pin,
 8001234:	2308      	movs	r3, #8
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <main+0x7c>)
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	2310      	movs	r3, #16
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <main+0x7c>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2320      	movs	r3, #32
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <main+0x7c>)
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <main+0x78>)
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <main+0x80>)
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <main+0x84>)
 8001250:	f7ff fb22 	bl	8000898 <alarmClock_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  alarmClock_buttons_handle();
 8001254:	f7ff fbc2 	bl	80009dc <alarmClock_buttons_handle>
	  alarmClock_display_handle();
 8001258:	f7ff fb7c 	bl	8000954 <alarmClock_display_handle>
	  alarmClock_alarm_handle();
 800125c:	f7ff fbd2 	bl	8000a04 <alarmClock_alarm_handle>
	  alarmClock_buttons_handle();
 8001260:	e7f8      	b.n	8001254 <main+0x68>
 8001262:	bf00      	nop
 8001264:	200001ec 	.word	0x200001ec
 8001268:	40010800 	.word	0x40010800
 800126c:	2000015c 	.word	0x2000015c
 8001270:	20000108 	.word	0x20000108

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b090      	sub	sp, #64	; 0x40
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f002 ff34 	bl	80040f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80012b2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fde5 	bl	8002e8c <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012c8:	f000 f902 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2102      	movs	r1, #2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 f851 	bl	8003390 <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012f4:	f000 f8ec 	bl	80014d0 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3740      	adds	r7, #64	; 0x40
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_I2C1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C1_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_I2C1_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_I2C1_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_I2C1_Init+0x50>)
 800133e:	f000 fd71 	bl	8001e24 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f8c2 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000108 	.word	0x20000108
 8001354:	40005400 	.word	0x40005400
 8001358:	000186a0 	.word	0x000186a0

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_TIM2_Init+0x98>)
 800137a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_TIM2_Init+0x98>)
 8001382:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_TIM2_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_TIM2_Init+0x98>)
 8001390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_TIM2_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_TIM2_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <MX_TIM2_Init+0x98>)
 80013a4:	f002 f982 	bl	80036ac <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ae:	f000 f88f 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_TIM2_Init+0x98>)
 80013c0:	f002 fb44 	bl	8003a4c <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ca:	f000 f881 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_TIM2_Init+0x98>)
 80013dc:	f002 fd1a 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013e6:	f000 f873 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000015c 	.word	0x2000015c

080013f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f002 fd60 	bl	8003ef4 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f849 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001a4 	.word	0x200001a4
 8001448:	40013800 	.word	0x40013800

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_GPIO_Init+0x7c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <MX_GPIO_Init+0x7c>)
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_GPIO_Init+0x7c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_GPIO_Init+0x7c>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_GPIO_Init+0x7c>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_GPIO_Init+0x7c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_GPIO_Init+0x7c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <MX_GPIO_Init+0x7c>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_GPIO_Init+0x7c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Light_Pin Mode_Pin Start_Stop_Pin */
  GPIO_InitStruct.Pin = Light_Pin|Mode_Pin|Start_Stop_Pin;
 80014a8:	2338      	movs	r3, #56	; 0x38
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_GPIO_Init+0x80>)
 80014bc:	f000 fb16 	bl	8001aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_MspInit+0x5c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x5c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_MspInit+0x60>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_MspInit+0x60>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000

08001540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_I2C_MspInit+0x70>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d123      	bne.n	80015a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001578:	23c0      	movs	r3, #192	; 0xc0
 800157a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 800158c:	f000 faae 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 8001596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159a:	61d3      	str	r3, [r2, #28]
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010c00 	.word	0x40010c00

080015bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d113      	bne.n	80015f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_TIM_Base_MspInit+0x44>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_TIM_Base_MspInit+0x44>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_TIM_Base_MspInit+0x44>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	201c      	movs	r0, #28
 80015ec:	f000 fa47 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f0:	201c      	movs	r0, #28
 80015f2:	f000 fa60 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_UART_MspInit+0x8c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d131      	bne.n	8001688 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x90>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_UART_MspInit+0x90>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_UART_MspInit+0x90>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_UART_MspInit+0x90>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_UART_MspInit+0x90>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_UART_MspInit+0x90>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <HAL_UART_MspInit+0x94>)
 800166a:	f000 fa3f 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <HAL_UART_MspInit+0x94>)
 8001684:	f000 fa32 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013800 	.word	0x40013800
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f8b5 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM2_IRQHandler+0x10>)
 80016f2:	f002 f8a3 	bl	800383c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000015c 	.word	0x2000015c

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f002 fce6 	bl	8004100 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20005000 	.word	0x20005000
 8001760:	00000400 	.word	0x00000400
 8001764:	200001f4 	.word	0x200001f4
 8001768:	20000348 	.word	0x20000348

0800176c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001778:	f7ff fff8 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800177e:	490c      	ldr	r1, [pc, #48]	; (80017b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001780:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001794:	4c09      	ldr	r4, [pc, #36]	; (80017bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a2:	f002 fcb3 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a6:	f7ff fd21 	bl	80011ec <main>
  bx lr
 80017aa:	4770      	bx	lr
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017b4:	08004ae4 	.word	0x08004ae4
  ldr r2, =_sbss
 80017b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017bc:	20000344 	.word	0x20000344

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_Init+0x28>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_Init+0x28>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f947 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 f808 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fe7c 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x54>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_InitTick+0x58>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f95f 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00e      	b.n	800183c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d80a      	bhi.n	800183a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f000 f927 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <HAL_InitTick+0x5c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000008 	.word	0x20000008
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x1c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x20>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a03      	ldr	r2, [pc, #12]	; (8001870 <HAL_IncTick+0x20>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000008 	.word	0x20000008
 8001870:	200001f8 	.word	0x200001f8

08001874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <HAL_GetTick+0x10>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	200001f8 	.word	0x200001f8

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fff0 	bl	8001874 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffe0 	bl	8001874 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e169      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8158 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a9a      	ldr	r2, [pc, #616]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80b1 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a40      	ldr	r2, [pc, #256]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3e      	ldr	r2, [pc, #248]	; (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	492f      	ldr	r1, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	492c      	ldr	r1, [pc, #176]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4928      	ldr	r1, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	491e      	ldr	r1, [pc, #120]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4918      	ldr	r1, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x2e2>
 8001d8a:	bf00      	nop
 8001d8c:	10320000 	.word	0x10320000
 8001d90:	10310000 	.word	0x10310000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	10210000 	.word	0x10210000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4909      	ldr	r1, [pc, #36]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae8e 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	372c      	adds	r7, #44	; 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e12b      	b.n	800208e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fb78 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e88:	f001 fbca 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8001e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a81      	ldr	r2, [pc, #516]	; (8002098 <HAL_I2C_Init+0x274>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d807      	bhi.n	8001ea8 <HAL_I2C_Init+0x84>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a80      	ldr	r2, [pc, #512]	; (800209c <HAL_I2C_Init+0x278>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	bf94      	ite	ls
 8001ea0:	2301      	movls	r3, #1
 8001ea2:	2300      	movhi	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e006      	b.n	8001eb6 <HAL_I2C_Init+0x92>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4a7d      	ldr	r2, [pc, #500]	; (80020a0 <HAL_I2C_Init+0x27c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0e7      	b.n	800208e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a78      	ldr	r2, [pc, #480]	; (80020a4 <HAL_I2C_Init+0x280>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9b      	lsrs	r3, r3, #18
 8001ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <HAL_I2C_Init+0x274>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_I2C_Init+0xd4>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	e009      	b.n	8001f0c <HAL_I2C_Init+0xe8>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <HAL_I2C_Init+0x284>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	495c      	ldr	r1, [pc, #368]	; (8002098 <HAL_I2C_Init+0x274>)
 8001f28:	428b      	cmp	r3, r1
 8001f2a:	d819      	bhi.n	8001f60 <HAL_I2C_Init+0x13c>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1e59      	subs	r1, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f3a:	1c59      	adds	r1, r3, #1
 8001f3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f40:	400b      	ands	r3, r1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_I2C_Init+0x138>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e59      	subs	r1, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5a:	e051      	b.n	8002000 <HAL_I2C_Init+0x1dc>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e04f      	b.n	8002000 <HAL_I2C_Init+0x1dc>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d111      	bne.n	8001f8c <HAL_I2C_Init+0x168>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e58      	subs	r0, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e012      	b.n	8001fb2 <HAL_I2C_Init+0x18e>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	0099      	lsls	r1, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Init+0x196>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e022      	b.n	8002000 <HAL_I2C_Init+0x1dc>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_I2C_Init+0x1bc>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e58      	subs	r0, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6859      	ldr	r1, [r3, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	440b      	add	r3, r1
 8001fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	e00f      	b.n	8002000 <HAL_I2C_Init+0x1dc>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	0099      	lsls	r1, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	6809      	ldr	r1, [r1, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800202e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6911      	ldr	r1, [r2, #16]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68d2      	ldr	r2, [r2, #12]
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	000186a0 	.word	0x000186a0
 800209c:	001e847f 	.word	0x001e847f
 80020a0:	003d08ff 	.word	0x003d08ff
 80020a4:	431bde83 	.word	0x431bde83
 80020a8:	10624dd3 	.word	0x10624dd3

080020ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	461a      	mov	r2, r3
 80020b8:	460b      	mov	r3, r1
 80020ba:	817b      	strh	r3, [r7, #10]
 80020bc:	4613      	mov	r3, r2
 80020be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff fbd8 	bl	8001874 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	f040 80e0 	bne.w	8002294 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2319      	movs	r3, #25
 80020da:	2201      	movs	r2, #1
 80020dc:	4970      	ldr	r1, [pc, #448]	; (80022a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fc9e 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0d3      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2C_Master_Transmit+0x50>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0cc      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ea>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d007      	beq.n	8002122 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002130:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2221      	movs	r2, #33	; 0x21
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2210      	movs	r2, #16
 800213e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	893a      	ldrh	r2, [r7, #8]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a50      	ldr	r2, [pc, #320]	; (80022a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fb08 	bl	8002780 <I2C_MasterRequestWrite>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e08d      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002190:	e066      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	6a39      	ldr	r1, [r7, #32]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fd5c 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11b      	bne.n	8002234 <HAL_I2C_Master_Transmit+0x188>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	6a39      	ldr	r1, [r7, #32]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fd53 	bl	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00d      	beq.n	8002260 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	2b04      	cmp	r3, #4
 800224a:	d107      	bne.n	800225c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e01a      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d194      	bne.n	8002192 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00100002 	.word	0x00100002
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	460b      	mov	r3, r1
 80022b6:	817b      	strh	r3, [r7, #10]
 80022b8:	4613      	mov	r3, r2
 80022ba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff fad8 	bl	8001874 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	f040 824b 	bne.w	800276a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2319      	movs	r3, #25
 80022da:	2201      	movs	r2, #1
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <HAL_I2C_Master_Receive+0x234>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fb9e 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	e23e      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2C_Master_Receive+0x54>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e237      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d007      	beq.n	8002322 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2222      	movs	r2, #34	; 0x22
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2210      	movs	r2, #16
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	893a      	ldrh	r2, [r7, #8]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <HAL_I2C_Master_Receive+0x238>)
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa8a 	bl	8002884 <I2C_MasterRequestRead>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1f8      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e1cc      	b.n	8002744 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d11e      	bne.n	80023f0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023c2:	b672      	cpsid	i
}
 80023c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023ec:	b662      	cpsie	i
}
 80023ee:	e035      	b.n	800245c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11e      	bne.n	8002436 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002432:	b662      	cpsie	i
}
 8002434:	e012      	b.n	800245c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800245c:	e172      	b.n	8002744 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	2b03      	cmp	r3, #3
 8002464:	f200 811f 	bhi.w	80026a6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b01      	cmp	r3, #1
 800246e:	d123      	bne.n	80024b8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fc7d 	bl	8002d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e173      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b6:	e145      	b.n	8002744 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d152      	bne.n	8002566 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	4906      	ldr	r1, [pc, #24]	; (80024e4 <HAL_I2C_Master_Receive+0x23c>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 faa8 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e148      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
 80024da:	bf00      	nop
 80024dc:	00100002 	.word	0x00100002
 80024e0:	ffff0000 	.word	0xffff0000
 80024e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024e8:	b672      	cpsid	i
}
 80024ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800252e:	b662      	cpsie	i
}
 8002530:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002564:	e0ee      	b.n	8002744 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	2200      	movs	r2, #0
 800256e:	4981      	ldr	r1, [pc, #516]	; (8002774 <HAL_I2C_Master_Receive+0x4cc>)
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fa55 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0f5      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002590:	b672      	cpsid	i
}
 8002592:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_I2C_Master_Receive+0x4d0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	4a6b      	ldr	r2, [pc, #428]	; (800277c <HAL_I2C_Master_Receive+0x4d4>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0a1a      	lsrs	r2, r3, #8
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00da      	lsls	r2, r3, #3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d118      	bne.n	800261e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800260e:	b662      	cpsie	i
}
 8002610:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0a6      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b04      	cmp	r3, #4
 800262a:	d1d9      	bne.n	80025e0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800266e:	b662      	cpsie	i
}
 8002670:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a4:	e04e      	b.n	8002744 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fb62 	bl	8002d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e058      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d124      	bne.n	8002744 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002710:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f ae88 	bne.w	800245e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	3728      	adds	r7, #40	; 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	00010004 	.word	0x00010004
 8002778:	20000000 	.word	0x20000000
 800277c:	14f8b589 	.word	0x14f8b589

08002780 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	460b      	mov	r3, r1
 800278e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d006      	beq.n	80027aa <I2C_MasterRequestWrite+0x2a>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d003      	beq.n	80027aa <I2C_MasterRequestWrite+0x2a>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a8:	d108      	bne.n	80027bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e00b      	b.n	80027d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d107      	bne.n	80027d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f91d 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d103      	bne.n	8002804 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e035      	b.n	8002874 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002810:	d108      	bne.n	8002824 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	e01b      	b.n	800285c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002824:	897b      	ldrh	r3, [r7, #10]
 8002826:	11db      	asrs	r3, r3, #7
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 0306 	and.w	r3, r3, #6
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f063 030f 	orn	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <I2C_MasterRequestWrite+0xfc>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f966 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e010      	b.n	8002874 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <I2C_MasterRequestWrite+0x100>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f956 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	00010008 	.word	0x00010008
 8002880:	00010002 	.word	0x00010002

08002884 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	460b      	mov	r3, r1
 8002892:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d006      	beq.n	80028be <I2C_MasterRequestRead+0x3a>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d003      	beq.n	80028be <I2C_MasterRequestRead+0x3a>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028bc:	d108      	bne.n	80028d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e00b      	b.n	80028e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	2b11      	cmp	r3, #17
 80028d6:	d107      	bne.n	80028e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f893 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290e:	d103      	bne.n	8002918 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e079      	b.n	8002a10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002924:	d108      	bne.n	8002938 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	e05f      	b.n	80029f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002938:	897b      	ldrh	r3, [r7, #10]
 800293a:	11db      	asrs	r3, r3, #7
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0306 	and.w	r3, r3, #6
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f063 030f 	orn	r3, r3, #15
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4930      	ldr	r1, [pc, #192]	; (8002a18 <I2C_MasterRequestRead+0x194>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f8dc 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e054      	b.n	8002a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4929      	ldr	r1, [pc, #164]	; (8002a1c <I2C_MasterRequestRead+0x198>)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f8cc 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e044      	b.n	8002a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f831 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d2:	d103      	bne.n	80029dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e017      	b.n	8002a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	11db      	asrs	r3, r3, #7
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0306 	and.w	r3, r3, #6
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f063 030e 	orn	r3, r3, #14
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <I2C_MasterRequestRead+0x198>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f888 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010008 	.word	0x00010008
 8002a1c:	00010002 	.word	0x00010002

08002a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a30:	e048      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d044      	beq.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe ff1b 	bl	8001874 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d139      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e023      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	e00c      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d093      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	e071      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d123      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e067      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d041      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7fe fe76 	bl	8001874 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d136      	bne.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e021      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e00b      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af6d 	bne.w	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8e3 	bl	8002e2e <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d028      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe fdfb 	bl	8001874 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d016      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d1c3      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f89b 	bl	8002e2e <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d028      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fdb3 	bl	8001874 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11d      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1c3      	bne.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d80:	e049      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d119      	bne.n	8002dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e030      	b.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7fe fd56 	bl	8001874 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d016      	beq.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e007      	b.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d1ae      	bne.n	8002d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d11b      	bne.n	8002e7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e272      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8087 	beq.w	8002fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eac:	4b92      	ldr	r3, [pc, #584]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb8:	4b8f      	ldr	r3, [pc, #572]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d112      	bne.n	8002eea <HAL_RCC_OscConfig+0x5e>
 8002ec4:	4b8c      	ldr	r3, [pc, #560]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d10b      	bne.n	8002eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed2:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d06c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x12c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d168      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e24c      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x76>
 8002ef4:	4b80      	ldr	r3, [pc, #512]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7f      	ldr	r2, [pc, #508]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e02e      	b.n	8002f60 <HAL_RCC_OscConfig+0xd4>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x98>
 8002f0a:	4b7b      	ldr	r3, [pc, #492]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7a      	ldr	r2, [pc, #488]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b78      	ldr	r3, [pc, #480]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a77      	ldr	r2, [pc, #476]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xd4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0xbc>
 8002f2e:	4b72      	ldr	r3, [pc, #456]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a71      	ldr	r2, [pc, #452]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6e      	ldr	r2, [pc, #440]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xd4>
 8002f48:	4b6b      	ldr	r3, [pc, #428]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6a      	ldr	r2, [pc, #424]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a67      	ldr	r2, [pc, #412]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fc84 	bl	8001874 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fc80 	bl	8001874 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e200      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b5d      	ldr	r3, [pc, #372]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xe4>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fc70 	bl	8001874 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fc6c 	bl	8001874 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1ec      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x10c>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d063      	beq.n	800308e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc6:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x18c>
 8002fde:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x176>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1c0      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4939      	ldr	r1, [pc, #228]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e03a      	b.n	800308e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b36      	ldr	r3, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x270>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe fc25 	bl	8001874 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe fc21 	bl	8001874 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1a1      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4927      	ldr	r1, [pc, #156]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x270>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fc04 	bl	8001874 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe fc00 	bl	8001874 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e180      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d03a      	beq.n	8003110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d019      	beq.n	80030d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_RCC_OscConfig+0x274>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fbe4 	bl	8001874 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fbe0 	bl	8001874 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e160      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 face 	bl	8003670 <RCC_Delay>
 80030d4:	e01c      	b.n	8003110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCC_OscConfig+0x274>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe fbca 	bl	8001874 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e2:	e00f      	b.n	8003104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe fbc6 	bl	8001874 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d908      	bls.n	8003104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e146      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	42420000 	.word	0x42420000
 8003100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b92      	ldr	r3, [pc, #584]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e9      	bne.n	80030e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a6 	beq.w	800326a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10d      	bne.n	800314a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4a87      	ldr	r2, [pc, #540]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	61d3      	str	r3, [r2, #28]
 800313a:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCC_OscConfig+0x4c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x4c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x4c8>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe fb87 	bl	8001874 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe fb83 	bl	8001874 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b64      	cmp	r3, #100	; 0x64
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e103      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x4c8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x312>
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	e02d      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x334>
 80031a6:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a69      	ldr	r2, [pc, #420]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	4b67      	ldr	r3, [pc, #412]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a66      	ldr	r2, [pc, #408]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	6213      	str	r3, [r2, #32]
 80031be:	e01c      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x356>
 80031c8:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a60      	ldr	r2, [pc, #384]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e00b      	b.n	80031fa <HAL_RCC_OscConfig+0x36e>
 80031e2:	4b5b      	ldr	r3, [pc, #364]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	4a5a      	ldr	r2, [pc, #360]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6213      	str	r3, [r2, #32]
 80031ee:	4b58      	ldr	r3, [pc, #352]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4a57      	ldr	r2, [pc, #348]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d015      	beq.n	800322e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fb37 	bl	8001874 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe fb33 	bl	8001874 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0b1      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ee      	beq.n	800320a <HAL_RCC_OscConfig+0x37e>
 800322c:	e014      	b.n	8003258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe fb21 	bl	8001874 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe fb1d 	bl	8001874 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e09b      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ee      	bne.n	8003236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325e:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8087 	beq.w	8003382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003274:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d061      	beq.n	8003344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d146      	bne.n	8003316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b33      	ldr	r3, [pc, #204]	; (8003358 <HAL_RCC_OscConfig+0x4cc>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fe faf1 	bl	8001874 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe faed 	bl	8001874 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e06d      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a8:	4b29      	ldr	r3, [pc, #164]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d108      	bne.n	80032d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4921      	ldr	r1, [pc, #132]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a19      	ldr	r1, [r3, #32]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	430b      	orrs	r3, r1
 80032e2:	491b      	ldr	r1, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4cc>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe fac1 	bl	8001874 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe fabd 	bl	8001874 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e03d      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46a>
 8003314:	e035      	b.n	8003382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe faaa 	bl	8001874 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe faa6 	bl	8001874 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e026      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x498>
 8003342:	e01e      	b.n	8003382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e019      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
 8003358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x500>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	429a      	cmp	r2, r3
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0d0      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4965      	ldr	r1, [pc, #404]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800340e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d040      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d115      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e073      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4936      	ldr	r1, [pc, #216]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7fe f9f8 	bl	8001874 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fe f9f4 	bl	8001874 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e053      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d210      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4922      	ldr	r1, [pc, #136]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	; (8003558 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1cc>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1d0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe f956 	bl	80017f0 <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40022000 	.word	0x40022000
 8003554:	40021000 	.word	0x40021000
 8003558:	08004a7c 	.word	0x08004a7c
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b04      	cmp	r3, #4
 800358c:	d002      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x30>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x36>
 8003592:	e027      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003596:	613b      	str	r3, [r7, #16]
      break;
 8003598:	e027      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0c9b      	lsrs	r3, r3, #18
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0c5b      	lsrs	r3, r3, #17
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	4a11      	ldr	r2, [pc, #68]	; (8003604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <HAL_RCC_GetSysClockFreq+0x98>)
 80035c6:	fb03 f202 	mul.w	r2, r3, r2
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e004      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	613b      	str	r3, [r7, #16]
      break;
 80035e2:	e002      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_GetSysClockFreq+0x98>)
 80035e6:	613b      	str	r3, [r7, #16]
      break;
 80035e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ea:	693b      	ldr	r3, [r7, #16]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	08004a94 	.word	0x08004a94
 8003604:	08004aa4 	.word	0x08004aa4
 8003608:	003d0900 	.word	0x003d0900

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b02      	ldr	r3, [pc, #8]	; (800361c <HAL_RCC_GetHCLKFreq+0x10>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	20000000 	.word	0x20000000

08003620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003624:	f7ff fff2 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003628:	4602      	mov	r2, r0
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	4903      	ldr	r1, [pc, #12]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	08004a8c 	.word	0x08004a8c

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff ffde 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	0adb      	lsrs	r3, r3, #11
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	08004a8c 	.word	0x08004a8c

08003670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <RCC_Delay+0x34>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <RCC_Delay+0x38>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0a5b      	lsrs	r3, r3, #9
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800368c:	bf00      	nop
  }
  while (Delay --);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f9      	bne.n	800368c <RCC_Delay+0x1c>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000000 	.word	0x20000000
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e041      	b.n	8003742 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd ff72 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f000 fa9a 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	f241 1311 	movw	r3, #4369	; 0x1111
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_TIM_Base_Stop+0x38>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	f240 4344 	movw	r3, #1092	; 0x444
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_TIM_Base_Stop+0x38>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
	...

08003798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e03a      	b.n	8003826 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIM_Base_Start_IT+0x98>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00e      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0x58>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d009      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0x58>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <HAL_TIM_Base_Start_IT+0x9c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0x58>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <HAL_TIM_Base_Start_IT+0xa0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d111      	bne.n	8003814 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b06      	cmp	r3, #6
 8003800:	d010      	beq.n	8003824 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003812:	e007      	b.n	8003824 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800

0800383c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0202 	mvn.w	r2, #2
 8003868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9b4 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f9a7 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f9b6 	bl	8003bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0204 	mvn.w	r2, #4
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f98a 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f97d 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f98c 	bl	8003bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0208 	mvn.w	r2, #8
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f960 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f953 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f962 	bl	8003bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f936 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f929 	bl	8003bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f938 	bl	8003bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0201 	mvn.w	r2, #1
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd fc04 	bl	80011c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d10e      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d107      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa7b 	bl	8003ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8fc 	bl	8003c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d10e      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0220 	mvn.w	r2, #32
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa46 	bl	8003ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_ConfigClockSource+0x1c>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0b4      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x186>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa0:	d03e      	beq.n	8003b20 <HAL_TIM_ConfigClockSource+0xd4>
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	f200 8087 	bhi.w	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aae:	f000 8086 	beq.w	8003bbe <HAL_TIM_ConfigClockSource+0x172>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	d87f      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b70      	cmp	r3, #112	; 0x70
 8003aba:	d01a      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0xa6>
 8003abc:	2b70      	cmp	r3, #112	; 0x70
 8003abe:	d87b      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b60      	cmp	r3, #96	; 0x60
 8003ac2:	d050      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x11a>
 8003ac4:	2b60      	cmp	r3, #96	; 0x60
 8003ac6:	d877      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b50      	cmp	r3, #80	; 0x50
 8003aca:	d03c      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0xfa>
 8003acc:	2b50      	cmp	r3, #80	; 0x50
 8003ace:	d873      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d058      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x13a>
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d86f      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b30      	cmp	r3, #48	; 0x30
 8003ada:	d064      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	2b30      	cmp	r3, #48	; 0x30
 8003ade:	d86b      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d060      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d867      	bhi.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05c      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d05a      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8003af0:	e062      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	f000 f968 	bl	8003dd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	609a      	str	r2, [r3, #8]
      break;
 8003b1e:	e04f      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	f000 f951 	bl	8003dd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b42:	609a      	str	r2, [r3, #8]
      break;
 8003b44:	e03c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 f8c8 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2150      	movs	r1, #80	; 0x50
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f91f 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003b64:	e02c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 f8e6 	bl	8003d44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2160      	movs	r1, #96	; 0x60
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f90f 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003b84:	e01c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 f8a8 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2140      	movs	r1, #64	; 0x40
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f8ff 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e00c      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f000 f8f6 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 8003bb6:	e003      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      break;
 8003bbc:	e000      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
	...

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <TIM_Base_SetConfig+0xb8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d007      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <TIM_Base_SetConfig+0xbc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a25      	ldr	r2, [pc, #148]	; (8003ce4 <TIM_Base_SetConfig+0xc0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <TIM_Base_SetConfig+0xb8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <TIM_Base_SetConfig+0xbc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <TIM_Base_SetConfig+0xc0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <TIM_Base_SetConfig+0xb8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800

08003ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 030a 	bic.w	r3, r3, #10
 8003d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0210 	bic.w	r2, r3, #16
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	031b      	lsls	r3, r3, #12
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f043 0307 	orr.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	021a      	lsls	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	609a      	str	r2, [r3, #8]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e046      	b.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d009      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800

08003ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e042      	b.n	8003f8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fb72 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f82b 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fce:	f023 030c 	bic.w	r3, r3, #12
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2c      	ldr	r2, [pc, #176]	; (80040a8 <UART_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7ff fb24 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	e002      	b.n	800400a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7ff fb0c 	bl	8003620 <HAL_RCC_GetPCLK1Freq>
 8004008:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <UART_SetConfig+0x118>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	0119      	lsls	r1, r3, #4
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <UART_SetConfig+0x118>)
 8004042:	fba3 0302 	umull	r0, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2064      	movs	r0, #100	; 0x64
 800404a:	fb00 f303 	mul.w	r3, r0, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	3332      	adds	r3, #50	; 0x32
 8004054:	4a15      	ldr	r2, [pc, #84]	; (80040ac <UART_SetConfig+0x118>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004060:	4419      	add	r1, r3
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	fbb2 f2f3 	udiv	r2, r2, r3
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <UART_SetConfig+0x118>)
 800407a:	fba3 0302 	umull	r0, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2064      	movs	r0, #100	; 0x64
 8004082:	fb00 f303 	mul.w	r3, r0, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <UART_SetConfig+0x118>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	440a      	add	r2, r1
 800409e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40013800 	.word	0x40013800
 80040ac:	51eb851f 	.word	0x51eb851f

080040b0 <_vsiprintf_r>:
 80040b0:	b500      	push	{lr}
 80040b2:	b09b      	sub	sp, #108	; 0x6c
 80040b4:	9100      	str	r1, [sp, #0]
 80040b6:	9104      	str	r1, [sp, #16]
 80040b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040bc:	9105      	str	r1, [sp, #20]
 80040be:	9102      	str	r1, [sp, #8]
 80040c0:	4905      	ldr	r1, [pc, #20]	; (80040d8 <_vsiprintf_r+0x28>)
 80040c2:	9103      	str	r1, [sp, #12]
 80040c4:	4669      	mov	r1, sp
 80040c6:	f000 f995 	bl	80043f4 <_svfiprintf_r>
 80040ca:	2200      	movs	r2, #0
 80040cc:	9b00      	ldr	r3, [sp, #0]
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	b01b      	add	sp, #108	; 0x6c
 80040d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d6:	bf00      	nop
 80040d8:	ffff0208 	.word	0xffff0208

080040dc <vsiprintf>:
 80040dc:	4613      	mov	r3, r2
 80040de:	460a      	mov	r2, r1
 80040e0:	4601      	mov	r1, r0
 80040e2:	4802      	ldr	r0, [pc, #8]	; (80040ec <vsiprintf+0x10>)
 80040e4:	6800      	ldr	r0, [r0, #0]
 80040e6:	f7ff bfe3 	b.w	80040b0 <_vsiprintf_r>
 80040ea:	bf00      	nop
 80040ec:	20000058 	.word	0x20000058

080040f0 <memset>:
 80040f0:	4603      	mov	r3, r0
 80040f2:	4402      	add	r2, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <__errno>:
 8004100:	4b01      	ldr	r3, [pc, #4]	; (8004108 <__errno+0x8>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000058 	.word	0x20000058

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	2600      	movs	r6, #0
 8004110:	4d0c      	ldr	r5, [pc, #48]	; (8004144 <__libc_init_array+0x38>)
 8004112:	4c0d      	ldr	r4, [pc, #52]	; (8004148 <__libc_init_array+0x3c>)
 8004114:	1b64      	subs	r4, r4, r5
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	f000 fc7a 	bl	8004a14 <_init>
 8004120:	2600      	movs	r6, #0
 8004122:	4d0a      	ldr	r5, [pc, #40]	; (800414c <__libc_init_array+0x40>)
 8004124:	4c0a      	ldr	r4, [pc, #40]	; (8004150 <__libc_init_array+0x44>)
 8004126:	1b64      	subs	r4, r4, r5
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	08004adc 	.word	0x08004adc
 8004148:	08004adc 	.word	0x08004adc
 800414c:	08004adc 	.word	0x08004adc
 8004150:	08004ae0 	.word	0x08004ae0

08004154 <__retarget_lock_acquire_recursive>:
 8004154:	4770      	bx	lr

08004156 <__retarget_lock_release_recursive>:
 8004156:	4770      	bx	lr

08004158 <_free_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4605      	mov	r5, r0
 800415c:	2900      	cmp	r1, #0
 800415e:	d040      	beq.n	80041e2 <_free_r+0x8a>
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f0c      	subs	r4, r1, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfb8      	it	lt
 800416a:	18e4      	addlt	r4, r4, r3
 800416c:	f000 f8dc 	bl	8004328 <__malloc_lock>
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <_free_r+0x8c>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	b933      	cbnz	r3, 8004184 <_free_r+0x2c>
 8004176:	6063      	str	r3, [r4, #4]
 8004178:	6014      	str	r4, [r2, #0]
 800417a:	4628      	mov	r0, r5
 800417c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004180:	f000 b8d8 	b.w	8004334 <__malloc_unlock>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d908      	bls.n	800419a <_free_r+0x42>
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	1821      	adds	r1, r4, r0
 800418c:	428b      	cmp	r3, r1
 800418e:	bf01      	itttt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	1809      	addeq	r1, r1, r0
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	e7ed      	b.n	8004176 <_free_r+0x1e>
 800419a:	461a      	mov	r2, r3
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b10b      	cbz	r3, 80041a4 <_free_r+0x4c>
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	d9fa      	bls.n	800419a <_free_r+0x42>
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	1850      	adds	r0, r2, r1
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d10b      	bne.n	80041c4 <_free_r+0x6c>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	4401      	add	r1, r0
 80041b0:	1850      	adds	r0, r2, r1
 80041b2:	4283      	cmp	r3, r0
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	d1e0      	bne.n	800417a <_free_r+0x22>
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4408      	add	r0, r1
 80041be:	6010      	str	r0, [r2, #0]
 80041c0:	6053      	str	r3, [r2, #4]
 80041c2:	e7da      	b.n	800417a <_free_r+0x22>
 80041c4:	d902      	bls.n	80041cc <_free_r+0x74>
 80041c6:	230c      	movs	r3, #12
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	e7d6      	b.n	800417a <_free_r+0x22>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	1821      	adds	r1, r4, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1809      	addeq	r1, r1, r0
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	6054      	str	r4, [r2, #4]
 80041e0:	e7cb      	b.n	800417a <_free_r+0x22>
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	2000033c 	.word	0x2000033c

080041e8 <sbrk_aligned>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4e0e      	ldr	r6, [pc, #56]	; (8004224 <sbrk_aligned+0x3c>)
 80041ec:	460c      	mov	r4, r1
 80041ee:	6831      	ldr	r1, [r6, #0]
 80041f0:	4605      	mov	r5, r0
 80041f2:	b911      	cbnz	r1, 80041fa <sbrk_aligned+0x12>
 80041f4:	f000 fbaa 	bl	800494c <_sbrk_r>
 80041f8:	6030      	str	r0, [r6, #0]
 80041fa:	4621      	mov	r1, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	f000 fba5 	bl	800494c <_sbrk_r>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	d00a      	beq.n	800421c <sbrk_aligned+0x34>
 8004206:	1cc4      	adds	r4, r0, #3
 8004208:	f024 0403 	bic.w	r4, r4, #3
 800420c:	42a0      	cmp	r0, r4
 800420e:	d007      	beq.n	8004220 <sbrk_aligned+0x38>
 8004210:	1a21      	subs	r1, r4, r0
 8004212:	4628      	mov	r0, r5
 8004214:	f000 fb9a 	bl	800494c <_sbrk_r>
 8004218:	3001      	adds	r0, #1
 800421a:	d101      	bne.n	8004220 <sbrk_aligned+0x38>
 800421c:	f04f 34ff 	mov.w	r4, #4294967295
 8004220:	4620      	mov	r0, r4
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	20000340 	.word	0x20000340

08004228 <_malloc_r>:
 8004228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800422c:	1ccd      	adds	r5, r1, #3
 800422e:	f025 0503 	bic.w	r5, r5, #3
 8004232:	3508      	adds	r5, #8
 8004234:	2d0c      	cmp	r5, #12
 8004236:	bf38      	it	cc
 8004238:	250c      	movcc	r5, #12
 800423a:	2d00      	cmp	r5, #0
 800423c:	4607      	mov	r7, r0
 800423e:	db01      	blt.n	8004244 <_malloc_r+0x1c>
 8004240:	42a9      	cmp	r1, r5
 8004242:	d905      	bls.n	8004250 <_malloc_r+0x28>
 8004244:	230c      	movs	r3, #12
 8004246:	2600      	movs	r6, #0
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4630      	mov	r0, r6
 800424c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004250:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004324 <_malloc_r+0xfc>
 8004254:	f000 f868 	bl	8004328 <__malloc_lock>
 8004258:	f8d8 3000 	ldr.w	r3, [r8]
 800425c:	461c      	mov	r4, r3
 800425e:	bb5c      	cbnz	r4, 80042b8 <_malloc_r+0x90>
 8004260:	4629      	mov	r1, r5
 8004262:	4638      	mov	r0, r7
 8004264:	f7ff ffc0 	bl	80041e8 <sbrk_aligned>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	4604      	mov	r4, r0
 800426c:	d155      	bne.n	800431a <_malloc_r+0xf2>
 800426e:	f8d8 4000 	ldr.w	r4, [r8]
 8004272:	4626      	mov	r6, r4
 8004274:	2e00      	cmp	r6, #0
 8004276:	d145      	bne.n	8004304 <_malloc_r+0xdc>
 8004278:	2c00      	cmp	r4, #0
 800427a:	d048      	beq.n	800430e <_malloc_r+0xe6>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	4631      	mov	r1, r6
 8004280:	4638      	mov	r0, r7
 8004282:	eb04 0903 	add.w	r9, r4, r3
 8004286:	f000 fb61 	bl	800494c <_sbrk_r>
 800428a:	4581      	cmp	r9, r0
 800428c:	d13f      	bne.n	800430e <_malloc_r+0xe6>
 800428e:	6821      	ldr	r1, [r4, #0]
 8004290:	4638      	mov	r0, r7
 8004292:	1a6d      	subs	r5, r5, r1
 8004294:	4629      	mov	r1, r5
 8004296:	f7ff ffa7 	bl	80041e8 <sbrk_aligned>
 800429a:	3001      	adds	r0, #1
 800429c:	d037      	beq.n	800430e <_malloc_r+0xe6>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	442b      	add	r3, r5
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	f8d8 3000 	ldr.w	r3, [r8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d038      	beq.n	800431e <_malloc_r+0xf6>
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	42a2      	cmp	r2, r4
 80042b0:	d12b      	bne.n	800430a <_malloc_r+0xe2>
 80042b2:	2200      	movs	r2, #0
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e00f      	b.n	80042d8 <_malloc_r+0xb0>
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	1b52      	subs	r2, r2, r5
 80042bc:	d41f      	bmi.n	80042fe <_malloc_r+0xd6>
 80042be:	2a0b      	cmp	r2, #11
 80042c0:	d917      	bls.n	80042f2 <_malloc_r+0xca>
 80042c2:	1961      	adds	r1, r4, r5
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	6025      	str	r5, [r4, #0]
 80042c8:	bf18      	it	ne
 80042ca:	6059      	strne	r1, [r3, #4]
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	bf08      	it	eq
 80042d0:	f8c8 1000 	streq.w	r1, [r8]
 80042d4:	5162      	str	r2, [r4, r5]
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	4638      	mov	r0, r7
 80042da:	f104 060b 	add.w	r6, r4, #11
 80042de:	f000 f829 	bl	8004334 <__malloc_unlock>
 80042e2:	f026 0607 	bic.w	r6, r6, #7
 80042e6:	1d23      	adds	r3, r4, #4
 80042e8:	1af2      	subs	r2, r6, r3
 80042ea:	d0ae      	beq.n	800424a <_malloc_r+0x22>
 80042ec:	1b9b      	subs	r3, r3, r6
 80042ee:	50a3      	str	r3, [r4, r2]
 80042f0:	e7ab      	b.n	800424a <_malloc_r+0x22>
 80042f2:	42a3      	cmp	r3, r4
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	d1dd      	bne.n	80042b4 <_malloc_r+0x8c>
 80042f8:	f8c8 2000 	str.w	r2, [r8]
 80042fc:	e7ec      	b.n	80042d8 <_malloc_r+0xb0>
 80042fe:	4623      	mov	r3, r4
 8004300:	6864      	ldr	r4, [r4, #4]
 8004302:	e7ac      	b.n	800425e <_malloc_r+0x36>
 8004304:	4634      	mov	r4, r6
 8004306:	6876      	ldr	r6, [r6, #4]
 8004308:	e7b4      	b.n	8004274 <_malloc_r+0x4c>
 800430a:	4613      	mov	r3, r2
 800430c:	e7cc      	b.n	80042a8 <_malloc_r+0x80>
 800430e:	230c      	movs	r3, #12
 8004310:	4638      	mov	r0, r7
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	f000 f80e 	bl	8004334 <__malloc_unlock>
 8004318:	e797      	b.n	800424a <_malloc_r+0x22>
 800431a:	6025      	str	r5, [r4, #0]
 800431c:	e7dc      	b.n	80042d8 <_malloc_r+0xb0>
 800431e:	605b      	str	r3, [r3, #4]
 8004320:	deff      	udf	#255	; 0xff
 8004322:	bf00      	nop
 8004324:	2000033c 	.word	0x2000033c

08004328 <__malloc_lock>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__malloc_lock+0x8>)
 800432a:	f7ff bf13 	b.w	8004154 <__retarget_lock_acquire_recursive>
 800432e:	bf00      	nop
 8004330:	20000338 	.word	0x20000338

08004334 <__malloc_unlock>:
 8004334:	4801      	ldr	r0, [pc, #4]	; (800433c <__malloc_unlock+0x8>)
 8004336:	f7ff bf0e 	b.w	8004156 <__retarget_lock_release_recursive>
 800433a:	bf00      	nop
 800433c:	20000338 	.word	0x20000338

08004340 <__ssputs_r>:
 8004340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	461f      	mov	r7, r3
 8004346:	688e      	ldr	r6, [r1, #8]
 8004348:	4682      	mov	sl, r0
 800434a:	42be      	cmp	r6, r7
 800434c:	460c      	mov	r4, r1
 800434e:	4690      	mov	r8, r2
 8004350:	680b      	ldr	r3, [r1, #0]
 8004352:	d82c      	bhi.n	80043ae <__ssputs_r+0x6e>
 8004354:	898a      	ldrh	r2, [r1, #12]
 8004356:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800435a:	d026      	beq.n	80043aa <__ssputs_r+0x6a>
 800435c:	6965      	ldr	r5, [r4, #20]
 800435e:	6909      	ldr	r1, [r1, #16]
 8004360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004364:	eba3 0901 	sub.w	r9, r3, r1
 8004368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800436c:	1c7b      	adds	r3, r7, #1
 800436e:	444b      	add	r3, r9
 8004370:	106d      	asrs	r5, r5, #1
 8004372:	429d      	cmp	r5, r3
 8004374:	bf38      	it	cc
 8004376:	461d      	movcc	r5, r3
 8004378:	0553      	lsls	r3, r2, #21
 800437a:	d527      	bpl.n	80043cc <__ssputs_r+0x8c>
 800437c:	4629      	mov	r1, r5
 800437e:	f7ff ff53 	bl	8004228 <_malloc_r>
 8004382:	4606      	mov	r6, r0
 8004384:	b360      	cbz	r0, 80043e0 <__ssputs_r+0xa0>
 8004386:	464a      	mov	r2, r9
 8004388:	6921      	ldr	r1, [r4, #16]
 800438a:	f000 fafd 	bl	8004988 <memcpy>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	6126      	str	r6, [r4, #16]
 800439c:	444e      	add	r6, r9
 800439e:	6026      	str	r6, [r4, #0]
 80043a0:	463e      	mov	r6, r7
 80043a2:	6165      	str	r5, [r4, #20]
 80043a4:	eba5 0509 	sub.w	r5, r5, r9
 80043a8:	60a5      	str	r5, [r4, #8]
 80043aa:	42be      	cmp	r6, r7
 80043ac:	d900      	bls.n	80043b0 <__ssputs_r+0x70>
 80043ae:	463e      	mov	r6, r7
 80043b0:	4632      	mov	r2, r6
 80043b2:	4641      	mov	r1, r8
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	f000 faaf 	bl	8004918 <memmove>
 80043ba:	2000      	movs	r0, #0
 80043bc:	68a3      	ldr	r3, [r4, #8]
 80043be:	1b9b      	subs	r3, r3, r6
 80043c0:	60a3      	str	r3, [r4, #8]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	4433      	add	r3, r6
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	462a      	mov	r2, r5
 80043ce:	f000 fae9 	bl	80049a4 <_realloc_r>
 80043d2:	4606      	mov	r6, r0
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1e0      	bne.n	800439a <__ssputs_r+0x5a>
 80043d8:	4650      	mov	r0, sl
 80043da:	6921      	ldr	r1, [r4, #16]
 80043dc:	f7ff febc 	bl	8004158 <_free_r>
 80043e0:	230c      	movs	r3, #12
 80043e2:	f8ca 3000 	str.w	r3, [sl]
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	e7e9      	b.n	80043c8 <__ssputs_r+0x88>

080043f4 <_svfiprintf_r>:
 80043f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	4698      	mov	r8, r3
 80043fa:	898b      	ldrh	r3, [r1, #12]
 80043fc:	4607      	mov	r7, r0
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	460d      	mov	r5, r1
 8004402:	4614      	mov	r4, r2
 8004404:	b09d      	sub	sp, #116	; 0x74
 8004406:	d50e      	bpl.n	8004426 <_svfiprintf_r+0x32>
 8004408:	690b      	ldr	r3, [r1, #16]
 800440a:	b963      	cbnz	r3, 8004426 <_svfiprintf_r+0x32>
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	f7ff ff0b 	bl	8004228 <_malloc_r>
 8004412:	6028      	str	r0, [r5, #0]
 8004414:	6128      	str	r0, [r5, #16]
 8004416:	b920      	cbnz	r0, 8004422 <_svfiprintf_r+0x2e>
 8004418:	230c      	movs	r3, #12
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e0d0      	b.n	80045c4 <_svfiprintf_r+0x1d0>
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	616b      	str	r3, [r5, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	2320      	movs	r3, #32
 800442c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004430:	2330      	movs	r3, #48	; 0x30
 8004432:	f04f 0901 	mov.w	r9, #1
 8004436:	f8cd 800c 	str.w	r8, [sp, #12]
 800443a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80045dc <_svfiprintf_r+0x1e8>
 800443e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004442:	4623      	mov	r3, r4
 8004444:	469a      	mov	sl, r3
 8004446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444a:	b10a      	cbz	r2, 8004450 <_svfiprintf_r+0x5c>
 800444c:	2a25      	cmp	r2, #37	; 0x25
 800444e:	d1f9      	bne.n	8004444 <_svfiprintf_r+0x50>
 8004450:	ebba 0b04 	subs.w	fp, sl, r4
 8004454:	d00b      	beq.n	800446e <_svfiprintf_r+0x7a>
 8004456:	465b      	mov	r3, fp
 8004458:	4622      	mov	r2, r4
 800445a:	4629      	mov	r1, r5
 800445c:	4638      	mov	r0, r7
 800445e:	f7ff ff6f 	bl	8004340 <__ssputs_r>
 8004462:	3001      	adds	r0, #1
 8004464:	f000 80a9 	beq.w	80045ba <_svfiprintf_r+0x1c6>
 8004468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800446a:	445a      	add	r2, fp
 800446c:	9209      	str	r2, [sp, #36]	; 0x24
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a1 	beq.w	80045ba <_svfiprintf_r+0x1c6>
 8004478:	2300      	movs	r3, #0
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004482:	f10a 0a01 	add.w	sl, sl, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	9307      	str	r3, [sp, #28]
 800448a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448e:	931a      	str	r3, [sp, #104]	; 0x68
 8004490:	4654      	mov	r4, sl
 8004492:	2205      	movs	r2, #5
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	4850      	ldr	r0, [pc, #320]	; (80045dc <_svfiprintf_r+0x1e8>)
 800449a:	f000 fa67 	bl	800496c <memchr>
 800449e:	9a04      	ldr	r2, [sp, #16]
 80044a0:	b9d8      	cbnz	r0, 80044da <_svfiprintf_r+0xe6>
 80044a2:	06d0      	lsls	r0, r2, #27
 80044a4:	bf44      	itt	mi
 80044a6:	2320      	movmi	r3, #32
 80044a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ac:	0711      	lsls	r1, r2, #28
 80044ae:	bf44      	itt	mi
 80044b0:	232b      	movmi	r3, #43	; 0x2b
 80044b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ba:	2b2a      	cmp	r3, #42	; 0x2a
 80044bc:	d015      	beq.n	80044ea <_svfiprintf_r+0xf6>
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	9a07      	ldr	r2, [sp, #28]
 80044c8:	4621      	mov	r1, r4
 80044ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ce:	3b30      	subs	r3, #48	; 0x30
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d94d      	bls.n	8004570 <_svfiprintf_r+0x17c>
 80044d4:	b1b0      	cbz	r0, 8004504 <_svfiprintf_r+0x110>
 80044d6:	9207      	str	r2, [sp, #28]
 80044d8:	e014      	b.n	8004504 <_svfiprintf_r+0x110>
 80044da:	eba0 0308 	sub.w	r3, r0, r8
 80044de:	fa09 f303 	lsl.w	r3, r9, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	46a2      	mov	sl, r4
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	e7d2      	b.n	8004490 <_svfiprintf_r+0x9c>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9103      	str	r1, [sp, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbb      	ittet	lt
 80044f6:	425b      	neglt	r3, r3
 80044f8:	f042 0202 	orrlt.w	r2, r2, #2
 80044fc:	9307      	strge	r3, [sp, #28]
 80044fe:	9307      	strlt	r3, [sp, #28]
 8004500:	bfb8      	it	lt
 8004502:	9204      	strlt	r2, [sp, #16]
 8004504:	7823      	ldrb	r3, [r4, #0]
 8004506:	2b2e      	cmp	r3, #46	; 0x2e
 8004508:	d10c      	bne.n	8004524 <_svfiprintf_r+0x130>
 800450a:	7863      	ldrb	r3, [r4, #1]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d134      	bne.n	800457a <_svfiprintf_r+0x186>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	3402      	adds	r4, #2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	9203      	str	r2, [sp, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80045e0 <_svfiprintf_r+0x1ec>
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	7821      	ldrb	r1, [r4, #0]
 800452e:	f000 fa1d 	bl	800496c <memchr>
 8004532:	b138      	cbz	r0, 8004544 <_svfiprintf_r+0x150>
 8004534:	2240      	movs	r2, #64	; 0x40
 8004536:	9b04      	ldr	r3, [sp, #16]
 8004538:	eba0 000a 	sub.w	r0, r0, sl
 800453c:	4082      	lsls	r2, r0
 800453e:	4313      	orrs	r3, r2
 8004540:	3401      	adds	r4, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004548:	2206      	movs	r2, #6
 800454a:	4826      	ldr	r0, [pc, #152]	; (80045e4 <_svfiprintf_r+0x1f0>)
 800454c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004550:	f000 fa0c 	bl	800496c <memchr>
 8004554:	2800      	cmp	r0, #0
 8004556:	d038      	beq.n	80045ca <_svfiprintf_r+0x1d6>
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <_svfiprintf_r+0x1f4>)
 800455a:	bb1b      	cbnz	r3, 80045a4 <_svfiprintf_r+0x1b0>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	3307      	adds	r3, #7
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	3308      	adds	r3, #8
 8004566:	9303      	str	r3, [sp, #12]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	4433      	add	r3, r6
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	e768      	b.n	8004442 <_svfiprintf_r+0x4e>
 8004570:	460c      	mov	r4, r1
 8004572:	2001      	movs	r0, #1
 8004574:	fb0c 3202 	mla	r2, ip, r2, r3
 8004578:	e7a6      	b.n	80044c8 <_svfiprintf_r+0xd4>
 800457a:	2300      	movs	r3, #0
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4619      	mov	r1, r3
 8004582:	3401      	adds	r4, #1
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	4620      	mov	r0, r4
 8004588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458c:	3a30      	subs	r2, #48	; 0x30
 800458e:	2a09      	cmp	r2, #9
 8004590:	d903      	bls.n	800459a <_svfiprintf_r+0x1a6>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c6      	beq.n	8004524 <_svfiprintf_r+0x130>
 8004596:	9105      	str	r1, [sp, #20]
 8004598:	e7c4      	b.n	8004524 <_svfiprintf_r+0x130>
 800459a:	4604      	mov	r4, r0
 800459c:	2301      	movs	r3, #1
 800459e:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a2:	e7f0      	b.n	8004586 <_svfiprintf_r+0x192>
 80045a4:	ab03      	add	r3, sp, #12
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	462a      	mov	r2, r5
 80045aa:	4638      	mov	r0, r7
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045ae:	a904      	add	r1, sp, #16
 80045b0:	f3af 8000 	nop.w
 80045b4:	1c42      	adds	r2, r0, #1
 80045b6:	4606      	mov	r6, r0
 80045b8:	d1d6      	bne.n	8004568 <_svfiprintf_r+0x174>
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	065b      	lsls	r3, r3, #25
 80045be:	f53f af2d 	bmi.w	800441c <_svfiprintf_r+0x28>
 80045c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c4:	b01d      	add	sp, #116	; 0x74
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ca:	ab03      	add	r3, sp, #12
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	462a      	mov	r2, r5
 80045d0:	4638      	mov	r0, r7
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045d4:	a904      	add	r1, sp, #16
 80045d6:	f000 f87d 	bl	80046d4 <_printf_i>
 80045da:	e7eb      	b.n	80045b4 <_svfiprintf_r+0x1c0>
 80045dc:	08004aa6 	.word	0x08004aa6
 80045e0:	08004aac 	.word	0x08004aac
 80045e4:	08004ab0 	.word	0x08004ab0
 80045e8:	00000000 	.word	0x00000000
 80045ec:	08004341 	.word	0x08004341

080045f0 <_printf_common>:
 80045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	4616      	mov	r6, r2
 80045f6:	4699      	mov	r9, r3
 80045f8:	688a      	ldr	r2, [r1, #8]
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	4607      	mov	r7, r0
 80045fe:	4293      	cmp	r3, r2
 8004600:	bfb8      	it	lt
 8004602:	4613      	movlt	r3, r2
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800460a:	460c      	mov	r4, r1
 800460c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004610:	b10a      	cbz	r2, 8004616 <_printf_common+0x26>
 8004612:	3301      	adds	r3, #1
 8004614:	6033      	str	r3, [r6, #0]
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	0699      	lsls	r1, r3, #26
 800461a:	bf42      	ittt	mi
 800461c:	6833      	ldrmi	r3, [r6, #0]
 800461e:	3302      	addmi	r3, #2
 8004620:	6033      	strmi	r3, [r6, #0]
 8004622:	6825      	ldr	r5, [r4, #0]
 8004624:	f015 0506 	ands.w	r5, r5, #6
 8004628:	d106      	bne.n	8004638 <_printf_common+0x48>
 800462a:	f104 0a19 	add.w	sl, r4, #25
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	6832      	ldr	r2, [r6, #0]
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	42ab      	cmp	r3, r5
 8004636:	dc2b      	bgt.n	8004690 <_printf_common+0xa0>
 8004638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800463c:	1e13      	subs	r3, r2, #0
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	bf18      	it	ne
 8004642:	2301      	movne	r3, #1
 8004644:	0692      	lsls	r2, r2, #26
 8004646:	d430      	bmi.n	80046aa <_printf_common+0xba>
 8004648:	4649      	mov	r1, r9
 800464a:	4638      	mov	r0, r7
 800464c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004650:	47c0      	blx	r8
 8004652:	3001      	adds	r0, #1
 8004654:	d023      	beq.n	800469e <_printf_common+0xae>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	6922      	ldr	r2, [r4, #16]
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	2b04      	cmp	r3, #4
 8004660:	bf14      	ite	ne
 8004662:	2500      	movne	r5, #0
 8004664:	6833      	ldreq	r3, [r6, #0]
 8004666:	f04f 0600 	mov.w	r6, #0
 800466a:	bf08      	it	eq
 800466c:	68e5      	ldreq	r5, [r4, #12]
 800466e:	f104 041a 	add.w	r4, r4, #26
 8004672:	bf08      	it	eq
 8004674:	1aed      	subeq	r5, r5, r3
 8004676:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800467a:	bf08      	it	eq
 800467c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004680:	4293      	cmp	r3, r2
 8004682:	bfc4      	itt	gt
 8004684:	1a9b      	subgt	r3, r3, r2
 8004686:	18ed      	addgt	r5, r5, r3
 8004688:	42b5      	cmp	r5, r6
 800468a:	d11a      	bne.n	80046c2 <_printf_common+0xd2>
 800468c:	2000      	movs	r0, #0
 800468e:	e008      	b.n	80046a2 <_printf_common+0xb2>
 8004690:	2301      	movs	r3, #1
 8004692:	4652      	mov	r2, sl
 8004694:	4649      	mov	r1, r9
 8004696:	4638      	mov	r0, r7
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d103      	bne.n	80046a6 <_printf_common+0xb6>
 800469e:	f04f 30ff 	mov.w	r0, #4294967295
 80046a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a6:	3501      	adds	r5, #1
 80046a8:	e7c1      	b.n	800462e <_printf_common+0x3e>
 80046aa:	2030      	movs	r0, #48	; 0x30
 80046ac:	18e1      	adds	r1, r4, r3
 80046ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046b8:	4422      	add	r2, r4
 80046ba:	3302      	adds	r3, #2
 80046bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c0:	e7c2      	b.n	8004648 <_printf_common+0x58>
 80046c2:	2301      	movs	r3, #1
 80046c4:	4622      	mov	r2, r4
 80046c6:	4649      	mov	r1, r9
 80046c8:	4638      	mov	r0, r7
 80046ca:	47c0      	blx	r8
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0e6      	beq.n	800469e <_printf_common+0xae>
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7d9      	b.n	8004688 <_printf_common+0x98>

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	7e0f      	ldrb	r7, [r1, #24]
 80046da:	4691      	mov	r9, r2
 80046dc:	2f78      	cmp	r7, #120	; 0x78
 80046de:	4680      	mov	r8, r0
 80046e0:	460c      	mov	r4, r1
 80046e2:	469a      	mov	sl, r3
 80046e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	; 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d5 	beq.w	80048a0 <_printf_i+0x1cc>
 80046f6:	2f58      	cmp	r7, #88	; 0x58
 80046f8:	f000 80c1 	beq.w	800487e <_printf_i+0x1aa>
 80046fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a101      	add	r1, pc, #4	; (adr r1, 8004714 <_printf_i+0x40>)
 8004710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	08004887 	.word	0x08004887
 8004744:	080047ad 	.word	0x080047ad
 8004748:	08004841 	.word	0x08004841
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048a9 	.word	0x080048a9
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047ad 	.word	0x080047ad
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004849 	.word	0x08004849
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	602a      	str	r2, [r5, #0]
 8004774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e0a0      	b.n	80048c2 <_printf_i+0x1ee>
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	0607      	lsls	r7, r0, #24
 8004786:	f103 0104 	add.w	r1, r3, #4
 800478a:	6029      	str	r1, [r5, #0]
 800478c:	d501      	bpl.n	8004792 <_printf_i+0xbe>
 800478e:	681e      	ldr	r6, [r3, #0]
 8004790:	e003      	b.n	800479a <_printf_i+0xc6>
 8004792:	0646      	lsls	r6, r0, #25
 8004794:	d5fb      	bpl.n	800478e <_printf_i+0xba>
 8004796:	f9b3 6000 	ldrsh.w	r6, [r3]
 800479a:	2e00      	cmp	r6, #0
 800479c:	da03      	bge.n	80047a6 <_printf_i+0xd2>
 800479e:	232d      	movs	r3, #45	; 0x2d
 80047a0:	4276      	negs	r6, r6
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a6:	230a      	movs	r3, #10
 80047a8:	4859      	ldr	r0, [pc, #356]	; (8004910 <_printf_i+0x23c>)
 80047aa:	e012      	b.n	80047d2 <_printf_i+0xfe>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	1d19      	adds	r1, r3, #4
 80047b2:	6029      	str	r1, [r5, #0]
 80047b4:	0605      	lsls	r5, r0, #24
 80047b6:	d501      	bpl.n	80047bc <_printf_i+0xe8>
 80047b8:	681e      	ldr	r6, [r3, #0]
 80047ba:	e002      	b.n	80047c2 <_printf_i+0xee>
 80047bc:	0641      	lsls	r1, r0, #25
 80047be:	d5fb      	bpl.n	80047b8 <_printf_i+0xe4>
 80047c0:	881e      	ldrh	r6, [r3, #0]
 80047c2:	2f6f      	cmp	r7, #111	; 0x6f
 80047c4:	bf0c      	ite	eq
 80047c6:	2308      	moveq	r3, #8
 80047c8:	230a      	movne	r3, #10
 80047ca:	4851      	ldr	r0, [pc, #324]	; (8004910 <_printf_i+0x23c>)
 80047cc:	2100      	movs	r1, #0
 80047ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047d2:	6865      	ldr	r5, [r4, #4]
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	bfa8      	it	ge
 80047d8:	6821      	ldrge	r1, [r4, #0]
 80047da:	60a5      	str	r5, [r4, #8]
 80047dc:	bfa4      	itt	ge
 80047de:	f021 0104 	bicge.w	r1, r1, #4
 80047e2:	6021      	strge	r1, [r4, #0]
 80047e4:	b90e      	cbnz	r6, 80047ea <_printf_i+0x116>
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	d04b      	beq.n	8004882 <_printf_i+0x1ae>
 80047ea:	4615      	mov	r5, r2
 80047ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80047f0:	fb03 6711 	mls	r7, r3, r1, r6
 80047f4:	5dc7      	ldrb	r7, [r0, r7]
 80047f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047fa:	4637      	mov	r7, r6
 80047fc:	42bb      	cmp	r3, r7
 80047fe:	460e      	mov	r6, r1
 8004800:	d9f4      	bls.n	80047ec <_printf_i+0x118>
 8004802:	2b08      	cmp	r3, #8
 8004804:	d10b      	bne.n	800481e <_printf_i+0x14a>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	07de      	lsls	r6, r3, #31
 800480a:	d508      	bpl.n	800481e <_printf_i+0x14a>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	6861      	ldr	r1, [r4, #4]
 8004810:	4299      	cmp	r1, r3
 8004812:	bfde      	ittt	le
 8004814:	2330      	movle	r3, #48	; 0x30
 8004816:	f805 3c01 	strble.w	r3, [r5, #-1]
 800481a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800481e:	1b52      	subs	r2, r2, r5
 8004820:	6122      	str	r2, [r4, #16]
 8004822:	464b      	mov	r3, r9
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	aa03      	add	r2, sp, #12
 800482e:	f7ff fedf 	bl	80045f0 <_printf_common>
 8004832:	3001      	adds	r0, #1
 8004834:	d14a      	bne.n	80048cc <_printf_i+0x1f8>
 8004836:	f04f 30ff 	mov.w	r0, #4294967295
 800483a:	b004      	add	sp, #16
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	f043 0320 	orr.w	r3, r3, #32
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	2778      	movs	r7, #120	; 0x78
 800484a:	4832      	ldr	r0, [pc, #200]	; (8004914 <_printf_i+0x240>)
 800484c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	6829      	ldr	r1, [r5, #0]
 8004854:	061f      	lsls	r7, r3, #24
 8004856:	f851 6b04 	ldr.w	r6, [r1], #4
 800485a:	d402      	bmi.n	8004862 <_printf_i+0x18e>
 800485c:	065f      	lsls	r7, r3, #25
 800485e:	bf48      	it	mi
 8004860:	b2b6      	uxthmi	r6, r6
 8004862:	07df      	lsls	r7, r3, #31
 8004864:	bf48      	it	mi
 8004866:	f043 0320 	orrmi.w	r3, r3, #32
 800486a:	6029      	str	r1, [r5, #0]
 800486c:	bf48      	it	mi
 800486e:	6023      	strmi	r3, [r4, #0]
 8004870:	b91e      	cbnz	r6, 800487a <_printf_i+0x1a6>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f023 0320 	bic.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	2310      	movs	r3, #16
 800487c:	e7a6      	b.n	80047cc <_printf_i+0xf8>
 800487e:	4824      	ldr	r0, [pc, #144]	; (8004910 <_printf_i+0x23c>)
 8004880:	e7e4      	b.n	800484c <_printf_i+0x178>
 8004882:	4615      	mov	r5, r2
 8004884:	e7bd      	b.n	8004802 <_printf_i+0x12e>
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	6826      	ldr	r6, [r4, #0]
 800488a:	1d18      	adds	r0, r3, #4
 800488c:	6961      	ldr	r1, [r4, #20]
 800488e:	6028      	str	r0, [r5, #0]
 8004890:	0635      	lsls	r5, r6, #24
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	d501      	bpl.n	800489a <_printf_i+0x1c6>
 8004896:	6019      	str	r1, [r3, #0]
 8004898:	e002      	b.n	80048a0 <_printf_i+0x1cc>
 800489a:	0670      	lsls	r0, r6, #25
 800489c:	d5fb      	bpl.n	8004896 <_printf_i+0x1c2>
 800489e:	8019      	strh	r1, [r3, #0]
 80048a0:	2300      	movs	r3, #0
 80048a2:	4615      	mov	r5, r2
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	e7bc      	b.n	8004822 <_printf_i+0x14e>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	2100      	movs	r1, #0
 80048ac:	1d1a      	adds	r2, r3, #4
 80048ae:	602a      	str	r2, [r5, #0]
 80048b0:	681d      	ldr	r5, [r3, #0]
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	4628      	mov	r0, r5
 80048b6:	f000 f859 	bl	800496c <memchr>
 80048ba:	b108      	cbz	r0, 80048c0 <_printf_i+0x1ec>
 80048bc:	1b40      	subs	r0, r0, r5
 80048be:	6060      	str	r0, [r4, #4]
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	6123      	str	r3, [r4, #16]
 80048c4:	2300      	movs	r3, #0
 80048c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ca:	e7aa      	b.n	8004822 <_printf_i+0x14e>
 80048cc:	462a      	mov	r2, r5
 80048ce:	4649      	mov	r1, r9
 80048d0:	4640      	mov	r0, r8
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	47d0      	blx	sl
 80048d6:	3001      	adds	r0, #1
 80048d8:	d0ad      	beq.n	8004836 <_printf_i+0x162>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	079b      	lsls	r3, r3, #30
 80048de:	d413      	bmi.n	8004908 <_printf_i+0x234>
 80048e0:	68e0      	ldr	r0, [r4, #12]
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	4298      	cmp	r0, r3
 80048e6:	bfb8      	it	lt
 80048e8:	4618      	movlt	r0, r3
 80048ea:	e7a6      	b.n	800483a <_printf_i+0x166>
 80048ec:	2301      	movs	r3, #1
 80048ee:	4632      	mov	r2, r6
 80048f0:	4649      	mov	r1, r9
 80048f2:	4640      	mov	r0, r8
 80048f4:	47d0      	blx	sl
 80048f6:	3001      	adds	r0, #1
 80048f8:	d09d      	beq.n	8004836 <_printf_i+0x162>
 80048fa:	3501      	adds	r5, #1
 80048fc:	68e3      	ldr	r3, [r4, #12]
 80048fe:	9903      	ldr	r1, [sp, #12]
 8004900:	1a5b      	subs	r3, r3, r1
 8004902:	42ab      	cmp	r3, r5
 8004904:	dcf2      	bgt.n	80048ec <_printf_i+0x218>
 8004906:	e7eb      	b.n	80048e0 <_printf_i+0x20c>
 8004908:	2500      	movs	r5, #0
 800490a:	f104 0619 	add.w	r6, r4, #25
 800490e:	e7f5      	b.n	80048fc <_printf_i+0x228>
 8004910:	08004ab7 	.word	0x08004ab7
 8004914:	08004ac8 	.word	0x08004ac8

08004918 <memmove>:
 8004918:	4288      	cmp	r0, r1
 800491a:	b510      	push	{r4, lr}
 800491c:	eb01 0402 	add.w	r4, r1, r2
 8004920:	d902      	bls.n	8004928 <memmove+0x10>
 8004922:	4284      	cmp	r4, r0
 8004924:	4623      	mov	r3, r4
 8004926:	d807      	bhi.n	8004938 <memmove+0x20>
 8004928:	1e43      	subs	r3, r0, #1
 800492a:	42a1      	cmp	r1, r4
 800492c:	d008      	beq.n	8004940 <memmove+0x28>
 800492e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004936:	e7f8      	b.n	800492a <memmove+0x12>
 8004938:	4601      	mov	r1, r0
 800493a:	4402      	add	r2, r0
 800493c:	428a      	cmp	r2, r1
 800493e:	d100      	bne.n	8004942 <memmove+0x2a>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800494a:	e7f7      	b.n	800493c <memmove+0x24>

0800494c <_sbrk_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	2300      	movs	r3, #0
 8004950:	4d05      	ldr	r5, [pc, #20]	; (8004968 <_sbrk_r+0x1c>)
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	f7fc fed2 	bl	8001700 <_sbrk>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_sbrk_r+0x1a>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_sbrk_r+0x1a>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000334 	.word	0x20000334

0800496c <memchr>:
 800496c:	4603      	mov	r3, r0
 800496e:	b510      	push	{r4, lr}
 8004970:	b2c9      	uxtb	r1, r1
 8004972:	4402      	add	r2, r0
 8004974:	4293      	cmp	r3, r2
 8004976:	4618      	mov	r0, r3
 8004978:	d101      	bne.n	800497e <memchr+0x12>
 800497a:	2000      	movs	r0, #0
 800497c:	e003      	b.n	8004986 <memchr+0x1a>
 800497e:	7804      	ldrb	r4, [r0, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	428c      	cmp	r4, r1
 8004984:	d1f6      	bne.n	8004974 <memchr+0x8>
 8004986:	bd10      	pop	{r4, pc}

08004988 <memcpy>:
 8004988:	440a      	add	r2, r1
 800498a:	4291      	cmp	r1, r2
 800498c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004990:	d100      	bne.n	8004994 <memcpy+0xc>
 8004992:	4770      	bx	lr
 8004994:	b510      	push	{r4, lr}
 8004996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499a:	4291      	cmp	r1, r2
 800499c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a0:	d1f9      	bne.n	8004996 <memcpy+0xe>
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <_realloc_r>:
 80049a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	4680      	mov	r8, r0
 80049aa:	4614      	mov	r4, r2
 80049ac:	460e      	mov	r6, r1
 80049ae:	b921      	cbnz	r1, 80049ba <_realloc_r+0x16>
 80049b0:	4611      	mov	r1, r2
 80049b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049b6:	f7ff bc37 	b.w	8004228 <_malloc_r>
 80049ba:	b92a      	cbnz	r2, 80049c8 <_realloc_r+0x24>
 80049bc:	f7ff fbcc 	bl	8004158 <_free_r>
 80049c0:	4625      	mov	r5, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c8:	f000 f81b 	bl	8004a02 <_malloc_usable_size_r>
 80049cc:	4284      	cmp	r4, r0
 80049ce:	4607      	mov	r7, r0
 80049d0:	d802      	bhi.n	80049d8 <_realloc_r+0x34>
 80049d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049d6:	d812      	bhi.n	80049fe <_realloc_r+0x5a>
 80049d8:	4621      	mov	r1, r4
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff fc24 	bl	8004228 <_malloc_r>
 80049e0:	4605      	mov	r5, r0
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d0ed      	beq.n	80049c2 <_realloc_r+0x1e>
 80049e6:	42bc      	cmp	r4, r7
 80049e8:	4622      	mov	r2, r4
 80049ea:	4631      	mov	r1, r6
 80049ec:	bf28      	it	cs
 80049ee:	463a      	movcs	r2, r7
 80049f0:	f7ff ffca 	bl	8004988 <memcpy>
 80049f4:	4631      	mov	r1, r6
 80049f6:	4640      	mov	r0, r8
 80049f8:	f7ff fbae 	bl	8004158 <_free_r>
 80049fc:	e7e1      	b.n	80049c2 <_realloc_r+0x1e>
 80049fe:	4635      	mov	r5, r6
 8004a00:	e7df      	b.n	80049c2 <_realloc_r+0x1e>

08004a02 <_malloc_usable_size_r>:
 8004a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a06:	1f18      	subs	r0, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfbc      	itt	lt
 8004a0c:	580b      	ldrlt	r3, [r1, r0]
 8004a0e:	18c0      	addlt	r0, r0, r3
 8004a10:	4770      	bx	lr
	...

08004a14 <_init>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr

08004a20 <_fini>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr
